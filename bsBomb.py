import base64
text= b'# -*- coding: utf-8 -*-
import bs
import bsUtils
from bsVector import Vector
import random
import bsAchievement
import weakref
import bsInternal
import bsSomething
import bsMap
import don
import bsSpaz

'''
Done by PC231392 / PCModder / PC290717
Full scripts shared to the world.
Do use it well and enjoy it well.
If possible, kindly do give credit to me.
Thanks to all.
100%
'''

class AntiGravArea(object):
    """For making the area to give the spaz upward force."""

    def __init__(self, position, radius):
        self.position = (position[0], position[1] + 1, position[2])
        self.radius = radius
        color = (random.random(), random.random(), random.random())
        self.material = bs.Material()
        self.material.addActions(conditions=(('theyHaveMaterial', bs.getSharedObject('playerMaterial'))),
                                 actions=(("modifyPartCollision", "collide", True),
                                          ("modifyPartCollision", "physical", False),
                                          ("call", "atConnect", self.touchedSpaz)))
        self.node = bs.newNode('region',
                               attrs={'position': (self.position[0], self.position[1], self.position[2]),
                                      'scale': (self.radius, self.radius, self.radius),
                                      'type': 'sphere',
                                      'materials': [self.material]})
        self.visualRadius = bs.newNode('shield', attrs={'position': self.position, 'color': color, 'radius': 0.1})
        bsUtils.animate(self.visualRadius, "radius", {0: 0, 500: self.radius * 2})
        bsUtils.animateArray(self.node, "scale", 3, {0: (0, 0, 0), 500: (self.radius, self.radius, self.radius)})

    def delete(self):
        if self.node.exists():
            self.node.delete()
        if self.visualRadius.exists():
            self.visualRadius.delete()

    def touchedSpaz(self):
        node = bs.getCollisionInfo('opposingNode')
        node.handleMessage(bs.PowerupMessage(powerupType = 'gravity'))

class SplatMessage(object):
    pass

class ExplodeMessage(object):
    pass

class ImpactMessage(object):
    """ impact bomb touched something """
    pass

class ArmMessage(object):
    pass

class WarnMessage(object):
    pass

class FireworkBombHitMessage(object):
    def __init__(self):
        pass

class TeleportBombHitMessage(object):
    def __init__(self):
        pass

class PoisonBombHitMessage(object):
    def __init__(self):
        pass

class ExplodeHitMessage(object):
    "Message saying an object was hit"
    def __init__(self):
        pass

class DirtBombOutMessage(object):
    def __init__(self):
        pass

class BombFactory(object):
    """
    category: Game Flow Classes

    Wraps up media and other resources used by bs.Bombs
    A single instance of this is shared between all bombs
    and can be retrieved via bs.Bomb.getFactory().

    Attributes:

       bombModel
          The bs.Model of a standard or ice bomb.

       stickyBombModel
          The bs.Model of a sticky-bomb.

       impactBombModel
          The bs.Model of an impact-bomb.

       landMinModel
          The bs.Model of a land-mine.

       tntModel
          The bs.Model of a tnt box.

       regularTex
          The bs.Texture for regular bombs.

       iceTex
          The bs.Texture for ice bombs.

       stickyTex
          The bs.Texture for sticky bombs.

       impactTex
          The bs.Texture for impact bombs.

       impactLitTex
          The bs.Texture for impact bombs with lights lit.

       landMineTex
          The bs.Texture for land-mines.

       landMineLitTex
          The bs.Texture for land-mines with the light lit.

       tntTex
          The bs.Texture for tnt boxes.

       hissSound
          The bs.Sound for the hiss sound an ice bomb makes.

       debrisFallSound
          The bs.Sound for random falling debris after an explosion.

       woodDebrisFallSound
          A bs.Sound for random wood debris falling after an explosion.

       explodeSounds
          A tuple of bs.Sounds for explosions.

       freezeSound
          A bs.Sound of an ice bomb freezing something.

       fuseSound
          A bs.Sound of a burning fuse.

       activateSound
          A bs.Sound for an activating impact bomb.

       warnSound
          A bs.Sound for an impact bomb about to explode due to time-out.

       bombMaterial
          A bs.Material applied to all bombs.

       normalSoundMaterial
          A bs.Material that generates standard bomb noises on impacts, etc.

       stickyMaterial
          A bs.Material that makes 'splat' sounds and makes collisions softer.

       landMineNoExplodeMaterial
          A bs.Material that keeps land-mines from blowing up.
          Applied to land-mines when they are created to allow land-mines to
          touch without exploding.

       landMineBlastMaterial
          A bs.Material applied to activated land-mines that causes them to
          explode on impact.

       impactBlastMaterial
          A bs.Material applied to activated impact-bombs that causes them to
          explode on impact.

       blastMaterial
          A bs.Material applied to bomb blast geometry which triggers impact
          events with what it touches.

       dinkSounds
          A tuple of bs.Sounds for when bombs hit the ground.

       stickyImpactSound
          The bs.Sound for a squish made by a sticky bomb hitting something.

       rollSound
          bs.Sound for a rolling bomb.
    """

    def getRandomExplodeSound(self):
        'Return a random explosion bs.Sound from the factory.'
        return self.explodeSounds[random.randrange(len(self.explodeSounds))]

    def __init__(self):
        """
        Instantiate a BombFactory.
        You shouldn't need to do this; call bs.Bomb.getFactory() to get a
        shared instance.
        """

        self.bombModel = bs.getModel('bomb')
        self.fireworkModel = bs.getModel('tnt')
        self.killLaKillModel = bs.getModel('bombSticky')
        self.stickyBombModel = bs.getModel('bombSticky')
        self.impactBombModel = bs.getModel('impactBomb')
        self.landMineModel = bs.getModel('landMine')
        self.tntModel = bs.getModel('tnt')
        self.qqModel = bs.getModel('bomb') #qq is jumping bomb
        self.tpModel = bs.getModel('bomb')
        self.poisonModel = bs.getModel('bomb')
        self.timerTex = bs.getTexture("nub")
#our bombs nows
        self.ballonModel = bs.getModel('bomb')
        self.blockModel = bs.getModel('tnt')
        self.iceImpactModel = bs.getModel('impactBomb')
        self.tbombModel = bs.getModel('frostyPelvis')
        self.gluebombModel = bs.getModel('impactBomb')
        self.weedbombModel = bs.getModel('frostyPelvis')
        self.spazBombModel = bs.getModel('neoSpazHead')
        self.curseBombModel = bs.getModel('impactBomb')
        self.nightBombModel = bs.getModel('bomb')
        self.blastBombModel = bs.getModel('bomb')
        self.revengeBombModel = bs.getModel('bomb')
        self.knockBombModel = bs.getModel('impactBomb')
        self.healBombModel = bs.getModel('impactBomb')
        self.speedBombModel = bs.getModel('impactBomb')
        self.characterBombModel = bs.getModel('impactBomb')
        self.mjBombModel = bs.getModel('impactBomb')
        self.icyTrioModel = bs.getModel('impactBomb')
        self.trioBombModel = bs.getModel('impactBomb')
        self.stickyIceBombModel = bs.getModel('bomb')
        self.stickyIceTrioBombModel = bs.getModel('impactBomb')
        self.boomBombModel = bs.getModel('impactBomb')
        self.useBombModel = bs.getModel('impactBomb')

        self.regularTex = bs.getTexture('bombColor')
        self.tpTex = bs.getTexture('bombStickyColor')
        self.poisonTex = bs.getTexture('bombColor')
        self.killLaKillTex = bs.getTexture('bombColor') 
        self.fireworkTex = bs.getTexture('eggTex2') 
        self.iceTex = bs.getTexture('bombColorIce')
        self.stickyTex = bs.getTexture('bombStickyColor')#bombStickyColor
        self.impactTex = bs.getTexture('impactBombColor')
        self.impactLitTex = bs.getTexture('impactBombColorLit')
        self.landMineTex = bs.getTexture('landMine')
        self.ballTex = bs.getTexture('achievementOutline')
        self.ballModel = bs.getModel('shield')
        self.landMineLitTex = bs.getTexture('landMineLit')
        self.tntTex = bs.getTexture('tnt')
        self.qqTex = bs.getTexture('eggTex3')
        self.qqLitTex = bs.getTexture('eggTex3')
#our tex
        self.ballonTex = bs.getTexture('bg')
        self.blockTex = bs.getTexture('achievementEmpty')
        self.iceImpactTex = bs.getTexture('bombColorIce')
        self.tbombTex = bs.getTexture('eggTex1')
        self.gluebombTex = bs.getTexture('powerupStickyBombs')
        self.weedbombTex = bs.getTexture('eggTex2')
        self.texSpazBomb = bs.getTexture('neoSpazColor')
        self.curseBombTex = bs.getTexture('night')
        self.nightBombTex = bs.getTexture('shield')
        self.blastBombTex = bs.getTexture('crossOutMask')
        self.revengeBombTex = bs.getTexture('gameCircleIcon')
        self.knockBombTex = bs.getTexture('medalGold')
        self.healBombTex = bs.getTexture('shield')
        self.speedBombTex = bs.getTexture('eyeColor')
        self.characterBombTex = bs.getTexture('crossOutMask')
        self.mjBombTex = bs.getTexture('menuButton')
        self.icyTrioTex = bs.getTexture('powerupShield')
        self.trioBombTex = bs.getTexture('star')
        self.stickyIceTrioTex = bs.getTexture('night')
        self.boomBombTex = bs.getTexture('crossOutMask')
        self.useTex = bs.getTexture('night')
        self.newTex = bs.getTexture("achievementOnslaught")

        self.hissSound = bs.getSound('hiss')
        self.debrisFallSound = bs.getSound('debrisFall')
        self.woodDebrisFallSound = bs.getSound('woodDebrisFall')
        self.qqSound = bs.getSound('laser')

        self.explodeSounds = (bs.getSound('explosion01'),
                              bs.getSound('explosion02'),
                              bs.getSound('explosion03'),
                              bs.getSound('explosion04'),
                              bs.getSound('explosion05'))

        self.freezeSound = bs.getSound('freeze')
        self.fuseSound = bs.getSound('fuse01')
        self.splatterSound = bs.getSound('splatter')
        self.activateSound = bs.getSound('activateBeep')
        self.warnSound = bs.getSound('warnBeep')

        # set up our material so new bombs dont collide with objects
        # that they are initially overlapping
        self.bombMaterial = bs.Material()
        self.normalSoundMaterial = bs.Material()
        self.stickyMaterial = bs.Material()
        self.stickyIceMaterial = bs.Material()

        self.bombMaterial.addActions(
            conditions=((('weAreYoungerThan',100),
                         'or',('theyAreYoungerThan',100)),
                        'and',('theyHaveMaterial',
                               bs.getSharedObject('objectMaterial'))),
            actions=(('modifyNodeCollision','collide',False)))

        # we want pickup materials to always hit us even if we're currently not
        # colliding with their node (generally due to the above rule)
        self.bombMaterial.addActions(
            conditions=('theyHaveMaterial',
                        bs.getSharedObject('pickupMaterial')),
            actions=(('modifyPartCollision','useNodeCollide', False)))
        
        self.bombMaterial.addActions(actions=('modifyPartCollision',
                                              'friction', 0.3))

        self.landMineNoExplodeMaterial = bs.Material()
        self.landMineBlastMaterial = bs.Material()
        self.landMineBlastMaterial.addActions(
            conditions=(
                ('weAreOlderThan',200),
                 'and', ('theyAreOlderThan',200),
                 'and', ('evalColliding',),
                 'and', (('theyDontHaveMaterial',
                          self.landMineNoExplodeMaterial),
                         'and', (('theyHaveMaterial',
                                  bs.getSharedObject('objectMaterial')),
                                 'or',('theyHaveMaterial',
                                       bs.getSharedObject('playerMaterial'))))),
            actions=(('message', 'ourNode', 'atConnect', ImpactMessage())))
        
        self.impactBlastMaterial = bs.Material()
        self.impactBlastMaterial.addActions(
            conditions=(('weAreOlderThan', 200),
                        'and', ('theyAreOlderThan',200),
                        'and', ('evalColliding',),
                        'and', (('theyHaveMaterial',
                                 bs.getSharedObject('footingMaterial')),
                               'or',('theyHaveMaterial',
                                     bs.getSharedObject('objectMaterial')))),
            actions=(('message','ourNode','atConnect',ImpactMessage())))

        self.blastMaterial = bs.Material()
        self.blastMaterial.addActions(
            conditions=(('theyHaveMaterial',
                         bs.getSharedObject('objectMaterial'))),
            actions=(('modifyPartCollision','collide',True),
                     ('modifyPartCollision','physical',False),
                     ('message','ourNode','atConnect',ExplodeHitMessage())))

        self.dirtMaterial = bs.Material()
        self.dirtMaterial.addActions(
            conditions=(('theyHaveMaterial',
                         bs.getSharedObject('objectMaterial'))),
            actions=(('modifyPartCollision','collide',True),
                     ('modifyPartCollision','physical',False),
                     ('message','ourNode','atDisconnect', DirtBombOutMessage()),
                     ('message','ourNode','atConnect',ExplodeHitMessage())))

        self.dinkSounds = (bs.getSound('bombDrop01'),
                           bs.getSound('bombDrop02'))
        self.stickyImpactSound = bs.getSound('stickyImpact')
        self.stickyIceImpactSound = bs.getSound('stickyImpact')
        self.rollSound = bs.getSound('bombRoll01')

        # collision sounds
        self.normalSoundMaterial.addActions(
            conditions=('theyHaveMaterial',
                        bs.getSharedObject('footingMaterial')),
            actions=(('impactSound',self.dinkSounds,2,0.8),
                     ('rollSound',self.rollSound,3,6)))

        self.stickyMaterial.addActions(
            actions=(('modifyPartCollision','stiffness',0.1),
                     ('modifyPartCollision','damping',1.0)))
                     
        self.stickyIceMaterial.addActions(
            actions=(('modifyPartCollision','stiffness',0.2),
                     ('modifyPartCollision','damping',1.2)))

        self.stickyMaterial.addActions(
            conditions=(('theyHaveMaterial',
                         bs.getSharedObject('playerMaterial')),
                        'or', ('theyHaveMaterial',
                               bs.getSharedObject('footingMaterial'))),
            actions=(('message','ourNode','atConnect',SplatMessage())))
            
        self.stickyIceMaterial.addActions(
            conditions=(('theyHaveMaterial',
                         bs.getSharedObject('playerMaterial')),
                        'or', ('theyHaveMaterial',
                               bs.getSharedObject('footingMaterial'))),
            actions=(('message','ourNode','atConnect',SplatMessage())))

class Blast(bs.Actor):
    """
    category: Game Flow Classes

    An explosion, as generated by a bs.Bomb.
    """
    def __init__(self, position=(0,1,0), velocity=(0,0,0), blastRadius=2.0,
                 blastType="normal", sourcePlayer=None, hitType='explosion',
                 hitSubType='normal'):
                
        """
        Instantiate with given values.
        """
        bs.Actor.__init__(self)
        
        factory = Bomb.getFactory()

        self.blastType = blastType
        self.sourcePlayer = sourcePlayer

        self.hitType = hitType;
        self.hitSubType = hitSubType;

        # blast radius
        self.radius = blastRadius

        # set our position a bit lower so we throw more things upward
        self.node = bs.newNode('region', delegate=self, attrs={
            'position':(position[0], position[1]-0.1, position[2]),
            'scale':(self.radius,self.radius,self.radius),
            'type':'sphere',
            'materials':(factory.blastMaterial if self.blastType not in ['dirt'] else factory.dirtMaterial, bs.getSharedObject('attackMaterial'))})

        if self.blastType == 'dirt': 
            def a():
                for i in getattr(self, 'dirt_nodes', []):
                    if i.exists(): i.handleMessage(DirtBombOutMessage())
                self.node.delete()
            bs.gameTimer(7000, bs.Call(a))
        else: bs.gameTimer(10, self.node.delete)

        # throw in an explosion and flash
        explosion = bs.newNode("explosion", attrs={
            'position':position,
            'velocity':(velocity[0],max(-1.0,velocity[1]),velocity[2]),
            'radius':self.radius if self.blastType != 'qq' else 0.8,
            'big':(self.blastType == 'tnt')})
        if self.blastType == "ice" or self.blastType == "iceImpact" or self.blastType == "stickyIce": # If we are ice or iceImpact bomb,
            explosion.color = (0, 0.05, 0.4)
        elif self.blastType == "Block":
            explosion.color = (0, 0.5, 0.5) # If we are 'Block' make
        elif self.blastType == 'spazBomb':
            explosion.color = (1,1,1)
        elif self.blastType == "firework":
            explosion.color = (0.6, 1, 1)
        elif self.blastType == "killLaKill":
            explosion.color = (0.3, 0.3, 0.3)
        elif self.blastType == "boss":
            explosion.color = (1.1, 1.1, 1)
        else:
            explosion.color = (1,0.8,0)
        if self.blastType != 'boss':
            bs.gameTimer(1000, explosion.delete)
        else:
            bs.gameTimer(500, explosion.delete)

        if self.blastType != 'ice' and self.blastType != 'iceImpact' and self.blastType != 'stickyIce':
            bs.emitBGDynamics(position=position, velocity=velocity,
                              count=int(1.0+random.random()*4),
                              emitType='tendrils',tendrilType='thinSmoke')
        elif self.blastType == 'killLaKill':
            bs.emitBGDynamics(
                position=position, emitType='distortion',
                spread=550.0)
            bs.emitBGDynamics(
                position=position, velocity=velocity,
                count=int(4.0+random.random()*40), emitType='tendrils',
                tendrilType='ice' if self.blastType == 'ice' else 'smoke')
        if self.blastType != 'qq':
            bs.emitBGDynamics(
                position=position, velocity=velocity,
                count=int(4.0+random.random()*4), emitType='tendrils',
                tendrilType='ice' if self.blastType == 'ice' else 'smoke')
            bs.emitBGDynamics(
                position=position, emitType='distortion',
                spread=1.0 if self.blastType == 'tnt' else 2.0)
        
        # and emit some shrapnel..
        if self.blastType == 'ice' or self.blastType == 'iceImpact' or self.blastType == 'stickyIce':
            def _doEmit():
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=30, spread=2.0, scale=0.4,
                                  chunkType='ice', emitType='stickers');
            bs.gameTimer(50, _doEmit) # looks better if we delay a bit

        if self.blastType == 'poison':
            def _doEmit():
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=30, spread=2.0, scale=0.4,
                                  chunkType='rock', emitType='stickers');
            bs.gameTimer(50, _doEmit) # looks better if we delay a bit
            
        elif self.blastType == 'firework':
            def _doEmit():
                bs.emitBGDynamics(position=position, velocity=(1.1 + random.random(), 1.8 + random.random(), 1.1 + random.random()),
                                  count = 360 + random.randrange(0,40), spread=0.8, scale=0.7,
                                  chunkType = 'spark');
            bs.gameTimer(45, _doEmit) 

        elif self.blastType == 'killLaKill':
            def _doEmit():
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=15, scale=0.6, chunkType='metal',
                                  emitType='stickers');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=20, scale=0.7, chunkType='spark',
                                  emitType='stickers');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(6.0+random.random()*12),
                                  scale=0.8, spread=1.5,chunkType='spark');
            bs.gameTimer(50,_doEmit)      

        elif self.blastType == 'use':
            def _doEmit():
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(4.0+random.random()*8),
                                  spread=0.7,chunkType='slime');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(4.0+random.random()*8), scale=0.5,
                                  spread=0.7,chunkType='slime');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=15, scale=0.6, chunkType='slime',
                                  emitType='stickers');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=20, scale=0.7, chunkType='spark',
                                  emitType='stickers');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(6.0+random.random()*12),
                                  scale=0.8, spread=1.5,chunkType='spark');
            bs.gameTimer(50,_doEmit) # looks better if we delay a bit            
            
        elif self.blastType == 'spazBomb':
            def _doEmit():
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(4.0+random.random()*8), scale=2.8,
                                  chunkType='metal');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(4.0+random.random()*8), scale=2.4,
                                  chunkType='metal');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=20, scale=2.7, chunkType='spark',
                                  emitType='stickers');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(8.0+random.random()*15), scale=2.8,
                                  spread=25.5, chunkType='spark');
            bs.gameTimer(50,_doEmit)
            
        elif self.blastType == 'stickyIceTrio':
            def _doEmit():
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(4.0+random.random()*8),
                                  spread=0.7,chunkType='spark');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(4.0+random.random()*8), scale=0.5,
                                  spread=0.7,chunkType='spark');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=15, scale=0.6, chunkType='spark',
                                  emitType='stickers');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=20, scale=0.7, chunkType='spark',
                                  emitType='stickers');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(6.0+random.random()*12),
                                  scale=0.8, spread=1.5,chunkType='spark');
            bs.gameTimer(50,_doEmit) # looks better if we delay a bit
            
        elif self.blastType == 'curseBomb':
            def _doEmit():
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(4.0+random.random()*8),
                                  spread=0.7,chunkType='spark');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(4.0+random.random()*8), scale=0.5,
                                  spread=0.7,chunkType='spark');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=15, scale=0.6, chunkType='spark',
                                  emitType='stickers');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=20, scale=0.7, chunkType='spark',
                                  emitType='stickers');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(6.0+random.random()*12),
                                  scale=0.8, spread=1.5,chunkType='spark');
            bs.gameTimer(50,_doEmit) # looks better if we delay a bit
            
        elif self.blastType == 'characterBomb':
            def _doEmit():
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(4.0+random.random()*8),
                                  spread=0.7,chunkType='spark');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(4.0+random.random()*8), scale=0.5,
                                  spread=0.7,chunkType='spark');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=15, scale=0.6, chunkType='spark',
                                  emitType='stickers');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=20, scale=0.7, chunkType='spark',
                                  emitType='stickers');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(6.0+random.random()*12),
                                  scale=0.8, spread=1.5,chunkType='spark');
            bs.gameTimer(50,_doEmit) # looks better if we delay a bit
            
        elif self.blastType == 'mjBomb':
            def _doEmit():
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(4.0+random.random()*8),
                                  spread=0.7,chunkType='spark');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(4.0+random.random()*8), scale=0.5,
                                  spread=0.7,chunkType='spark');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=15, scale=0.6, chunkType='spark',
                                  emitType='stickers');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=20, scale=0.7, chunkType='spark',
                                  emitType='stickers');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(6.0+random.random()*12),
                                  scale=0.8, spread=1.5,chunkType='spark');
            bs.gameTimer(50,_doEmit) # looks better if we delay a bit
            
        elif self.blastType == 'icyTrio':
            def _doEmit():
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(4.0+random.random()*8),
                                  spread=0.7,chunkType='spark');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(4.0+random.random()*8), scale=0.5,
                                  spread=0.7,chunkType='spark');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=15, scale=0.6, chunkType='spark',
                                  emitType='stickers');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=20, scale=0.7, chunkType='spark',
                                  emitType='stickers');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(6.0+random.random()*12),
                                  scale=0.8, spread=1.5,chunkType='spark');
            bs.gameTimer(50,_doEmit) # looks better if we delay a bit
            
        elif self.blastType == 'boomBomb':
            def _doEmit():
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(4.0+random.random()*8),
                                  spread=0.7,chunkType='spark');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(4.0+random.random()*8), scale=0.5,
                                  spread=0.7,chunkType='spark');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=15, scale=0.6, chunkType='spark',
                                  emitType='stickers');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=20, scale=0.7, chunkType='spark',
                                  emitType='stickers');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(6.0+random.random()*12),
                                  scale=0.8, spread=1.5,chunkType='spark');
            bs.gameTimer(50,_doEmit) # looks better if we delay a bit
            
        elif self.blastType == 'trioBomb':
            def _doEmit():
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(4.0+random.random()*8),
                                  spread=0.7,chunkType='spark');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(4.0+random.random()*8), scale=0.5,
                                  spread=0.7,chunkType='spark');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=15, scale=0.6, chunkType='spark',
                                  emitType='stickers');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=20, scale=0.7, chunkType='spark',
                                  emitType='stickers');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(6.0+random.random()*12),
                                  scale=0.8, spread=1.5,chunkType='spark');
            bs.gameTimer(50,_doEmit) # looks better if we delay a bit

        elif self.blastType == 'speedBomb':
            def _doEmit():
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(4.0+random.random()*8),
                                  spread=0.7,chunkType='spark');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(4.0+random.random()*8), scale=0.5,
                                  spread=0.7,chunkType='spark');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=15, scale=0.6, chunkType='spark',
                                  emitType='stickers');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=20, scale=0.7, chunkType='spark',
                                  emitType='stickers');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(6.0+random.random()*12),
                                  scale=0.8, spread=1.5,chunkType='spark');
            bs.gameTimer(50,_doEmit) # looks better if we delay a bit
            
        elif self.blastType == 'healBomb':
            def _doEmit():
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(4.0+random.random()*8),
                                  spread=0.7,chunkType='spark');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(4.0+random.random()*8), scale=0.5,
                                  spread=0.7,chunkType='spark');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=15, scale=0.6, chunkType='spark',
                                  emitType='stickers');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=20, scale=0.7, chunkType='spark',
                                  emitType='stickers');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(6.0+random.random()*12),
                                  scale=0.8, spread=1.5,chunkType='spark');
            bs.gameTimer(50,_doEmit) # looks better if we delay a bit
            
        elif self.blastType == 'knockBomb':
            def _doEmit():
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(4.0+random.random()*8),
                                  spread=0.7,chunkType='spark');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(4.0+random.random()*8), scale=0.5,
                                  spread=0.7,chunkType='spark');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=15, scale=0.6, chunkType='spark',
                                  emitType='stickers');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=20, scale=0.7, chunkType='spark',
                                  emitType='stickers');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(6.0+random.random()*12),
                                  scale=0.8, spread=1.5,chunkType='spark');
            bs.gameTimer(50,_doEmit) # looks better if we delay a bit
            
        elif self.blastType == 'nightBomb':
            def _doEmit():
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(4.0+random.random()*8),
                                  spread=0.7,chunkType='spark');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(4.0+random.random()*8), scale=0.5,
                                  spread=0.7,chunkType='spark');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=15, scale=0.6, chunkType='spark',
                                  emitType='stickers');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=20, scale=0.7, chunkType='spark',
                                  emitType='stickers');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(6.0+random.random()*12),
                                  scale=0.8, spread=1.5,chunkType='spark');
            bs.gameTimer(50,_doEmit) # looks better if we delay a bit
            
        elif self.blastType == 'blastBomb':
            def _doEmit():
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(4.0+random.random()*8),
                                  spread=0.7,chunkType='spark');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(4.0+random.random()*8), scale=0.5,
                                  spread=0.7,chunkType='spark');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=15, scale=0.6, chunkType='spark',
                                  emitType='stickers');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=20, scale=0.7, chunkType='spark',
                                  emitType='stickers');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(6.0+random.random()*12),
                                  scale=0.8, spread=1.5,chunkType='spark');
            bs.gameTimer(50,_doEmit) # looks better if we delay a bit
            
        elif self.blastType == 'revengeBomb':
            def _doEmit():
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(4.0+random.random()*8),
                                  spread=0.7,chunkType='spark');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(4.0+random.random()*8), scale=0.5,
                                  spread=0.7,chunkType='spark');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=15, scale=0.6, chunkType='spark',
                                  emitType='stickers');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=20, scale=0.7, chunkType='spark',
                                  emitType='stickers');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(6.0+random.random()*12),
                                  scale=0.8, spread=1.5,chunkType='spark');
            bs.gameTimer(50,_doEmit) # looks better if we delay a bit

        elif self.blastType == 'sticky':
            def _doEmit():
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(4.0+random.random()*8),
                                  spread=0.7,chunkType='slime');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(4.0+random.random()*8), scale=0.5,
                                  spread=0.7,chunkType='slime');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=15, scale=0.6, chunkType='slime',
                                  emitType='stickers');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=20, scale=0.7, chunkType='spark',
                                  emitType='stickers');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(6.0+random.random()*12),
                                  scale=0.8, spread=1.5,chunkType='spark');
            bs.gameTimer(50,_doEmit) # looks better if we delay a bit

        elif self.blastType == 'dirt':
            def _doEmit():
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(4.0+random.random()*8),
                                  spread=0.7,chunkType='slime');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(4.0+random.random()*8), scale=0.5,
                                  spread=0.7,chunkType='slime');
            bs.gameTimer(50,_doEmit)
            
        elif self.blastType == 'tbomb': # regular bomb shrapnel
            def _doEmit():
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=0, scale=0.8,
                                  chunkType='spark');
            bs.gameTimer(50,_doEmit) # looks better if we delay a bit       
            
        elif self.blastType == 'Block':
            def _doEmit():
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(4.0+random.random()*8), scale=0.8,
                                  chunkType='metal');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(4.0+random.random()*8), scale=0.8,
                                  chunkType='metal');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(4.0+random.random()*8), scale=0.8,
                                  chunkType='metal');
            bs.gameTimer(50,_doEmit) # looks better if we delay a bit
            
        elif self.blastType == 'gluebomb': # regular bomb shrapnel
            def _doEmit():
                g = bs.newNode('prop', delegate=self, attrs={'position':(position[0]-1+random.random()*3,position[1]+random.random()*2,position[2]-1+random.random()*3),'velocity':(0,0,0),'body':'sphere','model':'xxxx','shadowSize':0.3,'sticky':True,'colorTexture':factory.impactTex,'bodyScale':1.5,'materials':(bs.getSharedObject('objectMaterial'))})
                bs.gameTimer(6500,g.delete)
                g = bs.newNode('prop', delegate=self, attrs={'position':(position[0]-1+random.random()*3,position[1]+random.random()*2,position[2]-1+random.random()*3),'velocity':(0,0,0),'body':'sphere','model':'xxxx','shadowSize':0.3,'sticky':True,'colorTexture':factory.impactTex,'bodyScale':1.5,'materials':(bs.getSharedObject('objectMaterial'))})
                bs.gameTimer(6500,g.delete)
                g = bs.newNode('prop', delegate=self, attrs={'position':(position[0]-1+random.random()*3,position[1]+random.random()*2,position[2]-1+random.random()*3),'velocity':(0,0,0),'body':'sphere','model':'xxxx','shadowSize':0.3,'sticky':True,'colorTexture':factory.impactTex,'bodyScale':1.5,'materials':(bs.getSharedObject('objectMaterial'))})
                bs.gameTimer(6500,g.delete)
                g = bs.newNode('prop', delegate=self, attrs={'position':(position[0]-1+random.random()*3,position[1]+random.random()*2,position[2]-1+random.random()*3),'velocity':(0,0,0),'body':'sphere','model':'xxxx','shadowSize':0.3,'sticky':True,'colorTexture':factory.impactTex,'bodyScale':1.5,'materials':(bs.getSharedObject('objectMaterial'))})
                bs.gameTimer(6500,g.delete)
                g = bs.newNode('prop', delegate=self, attrs={'position':(position[0]-1+random.random()*3,position[1]+random.random()*2,position[2]-1+random.random()*3),'velocity':(0,0,0),'body':'sphere','model':'xxxx','shadowSize':0.3,'sticky':True,'colorTexture':factory.impactTex,'bodyScale':1.5,'materials':(bs.getSharedObject('objectMaterial'))})
                bs.gameTimer(6500,g.delete)
                g = bs.newNode('prop', delegate=self, attrs={'position':(position[0]-1+random.random()*3,position[1]+random.random()*2,position[2]-1+random.random()*3),'velocity':(0,0,0),'body':'sphere','model':'xxxx','shadowSize':0.3,'sticky':True,'colorTexture':factory.impactTex,'bodyScale':1.5,'materials':(bs.getSharedObject('objectMaterial'))})
                bs.gameTimer(6500,g.delete)
                g = bs.newNode('prop', delegate=self, attrs={'position':(position[0]-1+random.random()*3,position[1]+random.random()*2,position[2]-1+random.random()*3),'velocity':(0,0,0),'body':'sphere','model':'xxxx','shadowSize':0.3,'sticky':True,'colorTexture':factory.impactTex,'bodyScale':1.5,'materials':(bs.getSharedObject('objectMaterial'))})
                bs.gameTimer(6500,g.delete)
                g = bs.newNode('prop', delegate=self, attrs={'position':(position[0]-1+random.random()*3,position[1]+random.random()*2,position[2]-1+random.random()*3),'velocity':(0,0,0),'body':'sphere','model':'xxxx','shadowSize':0.3,'sticky':True,'colorTexture':factory.impactTex,'bodyScale':1.5,'materials':(bs.getSharedObject('objectMaterial'))})
                bs.gameTimer(6500,g.delete)
                g = bs.newNode('prop', delegate=self, attrs={'position':(position[0]-1+random.random()*3,position[1]+random.random()*2,position[2]-1+random.random()*3),'velocity':(0,0,0),'body':'sphere','model':'xxxx','shadowSize':0.3,'sticky':True,'colorTexture':factory.impactTex,'bodyScale':1.5,'materials':(bs.getSharedObject('objectMaterial'))})
                bs.gameTimer(6500,g.delete)
                g = bs.newNode('prop', delegate=self, attrs={'position':(position[0]-1+random.random()*3,position[1]+random.random()*2,position[2]-1+random.random()*3),'velocity':(0,0,0),'body':'sphere','model':'xxxx','shadowSize':0.3,'sticky':True,'colorTexture':factory.impactTex,'bodyScale':1.5,'materials':(bs.getSharedObject('objectMaterial'))})
                bs.gameTimer(6500,g.delete)
                bs.emitBGDynamics(position=(position[0]-1+random.random()*2,position[1]+random.random(),position[2]-1+random.random()*2),velocity=(0,0,0),count=5,scale=7.5,chunkType='slime',emitType='stickers');
                bs.emitBGDynamics(position=(position[0]-1+random.random()*2,position[1]+random.random(),position[2]-1+random.random()*2),velocity=(0,0,0),count=5,scale=7.5,chunkType='slime',emitType='stickers');
                bs.emitBGDynamics(position=(position[0]-1+random.random()*2,position[1]+random.random(),position[2]-1+random.random()*2),velocity=(0,0,0),count=5,scale=7.5,chunkType='slime',emitType='stickers');
                bs.emitBGDynamics(position=(position[0]-1+random.random()*2,position[1]+random.random(),position[2]-1+random.random()*2),velocity=(0,0,0),count=5,scale=7.5,chunkType='slime',emitType='stickers');
                bs.emitBGDynamics(position=(position[0]-1+random.random()*2,position[1]+random.random(),position[2]-1+random.random()*2),velocity=(0,0,0),count=5,scale=7.5,chunkType='slime',emitType='stickers');
                bs.emitBGDynamics(position=(position[0]-1+random.random()*2,position[1]+random.random(),position[2]-1+random.random()*2),velocity=(0,0,0),count=5,scale=7.5,chunkType='slime',emitType='stickers');
                bs.emitBGDynamics(position=(position[0]-1+random.random()*2,position[1]+random.random(),position[2]-1+random.random()*2),velocity=(0,0,0),count=5,scale=7.5,chunkType='slime',emitType='stickers');
                bs.emitBGDynamics(position=(position[0]-1+random.random()*2,position[1]+random.random(),position[2]-1+random.random()*2),velocity=(0,0,0),count=5,scale=7.5,chunkType='slime',emitType='stickers');
                bs.emitBGDynamics(position=(position[0]-1+random.random()*2,position[1]+random.random(),position[2]-1+random.random()*2),velocity=(0,0,0),count=5,scale=7.5,chunkType='slime',emitType='stickers');
                bs.emitBGDynamics(position=(position[0]-1+random.random()*2,position[1]+random.random(),position[2]-1+random.random()*2),velocity=(0,0,0),count=5,scale=7.5,chunkType='slime',emitType='stickers');
                bs.emitBGDynamics(position=(position[0]-1+random.random()*2,position[1]+random.random(),position[2]-1+random.random()*2),velocity=(0,0,0),count=5,scale=7.5,chunkType='slime',emitType='stickers');
                bs.emitBGDynamics(position=(position[0]-1+random.random()*2,position[1]+random.random(),position[2]-1+random.random()*2),velocity=(0,0,0),count=5,scale=7.5,chunkType='slime',emitType='stickers');
                #bs.emitBGDynamics(position=position,emitType='distortion',spread=6,count = 100);
            bs.gameTimer(50,_doEmit) # looks better if we delay a bit            
            
        elif self.blastType == 'weedbomb': # regular bomb shrapnel
            def _doEmit():
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(4.0+random.random()*8), scale=0.8,
                                  chunkType='sweat');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(4.0+random.random()*8), scale=0.8,
                                  chunkType='sweat');
            bs.gameTimer(50,_doEmit) # looks better if we delay a bit

        elif self.blastType == 'impact': # regular bomb shrapnel
            def _doEmit():
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(4.0+random.random()*8), scale=0.8,
                                  chunkType='metal');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(4.0+random.random()*8), scale=0.4,
                                  chunkType='metal');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=20, scale=0.7, chunkType='spark',
                                  emitType='stickers');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(8.0+random.random()*15), scale=0.8,
                                  spread=1.5, chunkType='spark');
            bs.gameTimer(50,_doEmit) # looks better if we delay a bit

        else: # regular or land mine bomb shrapnel
            def _doEmit():
                if self.blastType != 'tnt':
                    bs.emitBGDynamics(position=position, velocity=velocity,
                                      count=int(4.0+random.random()*8),
                                      chunkType='rock');
                    bs.emitBGDynamics(position=position, velocity=velocity,
                                      count=int(4.0+random.random()*8),
                                      scale=0.5,chunkType='rock');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=30,
                                  scale=1.0 if self.blastType=='tnt' else 0.7,
                                  chunkType='spark', emitType='stickers');
                bs.emitBGDynamics(position=position, velocity=velocity,
                                  count=int(18.0+random.random()*20),
                                  scale=1.0 if self.blastType == 'tnt' else 0.8,
                                  spread=1.5, chunkType='spark');
            
                # tnt throws splintery chunks
                if self.blastType == 'tnt':
                    def _emitSplinters():
                        bs.emitBGDynamics(position=position, velocity=velocity,
                                          count=int(20.0+random.random()*25),
                                          scale=0.8, spread=1.0,
                                          chunkType='splinter');
                    bs.gameTimer(10,_emitSplinters)
                
                # every now and then do a sparky one
                if self.blastType == 'tnt' or random.random() < 0.1:
                    def _emitExtraSparks():
                        bs.emitBGDynamics(position=position, velocity=velocity,
                                          count=int(10.0+random.random()*20),
                                          scale=0.8, spread=1.5,
                                          chunkType='spark');
                    bs.gameTimer(20,_emitExtraSparks)
                        
            bs.gameTimer(50,_doEmit) # looks better if we delay a bit

        light = bs.newNode('light', attrs={
            'position': position,
            'volumeIntensityScale': 10.0,
            'color': ((0.6, 0.6, 1.0) if self.blastType == 'ice' or self.blastType == 'iceImpact' or self.blastType == 'stickyIce'
                      else (0,5,0) if self.blastType == 'Block'
                      else (1, 0.3, 0.1))})

        s = random.uniform(0.6,0.9)
        scorchRadius = lightRadius = self.radius
        if self.blastType == 'tnt':
            lightRadius *= 1.4
            scorchRadius *= 1.15
            s *= 3.0
        elif self.blastType == 'qq':
            scorchRadius *= 0.5
        elif self.blastType == 'boss':
            scorchRadius = 0
            lightRadius = 0.35

        iScale = 1.6
        if self.blastType not in ['firework', 'qq']:
            bsUtils.animate(light,"intensity", {
                0:0, 10:0.5, 20:1.0, 2000:0.5, 2750:0})
            bsUtils.animate(light,"radius", {
                0:0, 10:0.5, 20:1.0, 2000:0.5, 2750:0})
            bs.gameTimer(2750,light.delete)
        if self.blastType == 'qq':
            bsUtils.animate(light,"intensity", {
                0:0, 10:0.5, 20:0.55, 700:1, 900:0})
            bsUtils.animate(light,"radius", {
                0:0, 10:0.5, 20:0.55, 700:0.6, 900:0})
            bs.gameTimer(900,light.delete)
        if self.blastType == 'firework':
            bsUtils.animate(light,"intensity", {
                0:0, 10:0.5, 20:1.0, 1200:0.5, 4000:0})
            bsUtils.animate(light,"radius", {
                0:0, 10:0.5, 20:1.0, 1200:0.5, 4000:0})
            bs.gameTimer(4000,light.delete)

        # make a scorch that fades over time
        scorch = bs.newNode('scorch', attrs={
            'position':position,
            'size':scorchRadius*0.5 if self.blastType != "dirt" else scorchRadius*1.2,
            'big':(self.blastType in ['dirt','tnt'])})
        if self.blastType == 'ice' or self.blastType == 'iceImpact' or self.blastType == 'stickyIce':
            scorch.color = (1,1,1.5)
        elif self.blastType == 'Block':
            scorch.color = (0, 5, 0)  
        elif self.blastType == 'tbomb':
            scorch.color = (1,1,1.5)    
        elif self.blastType == 'gluebomb':
            scorch.color = (0,1,0)       
        elif self.blastType == 'weedbomb':
            scorch.color = (-3,2,-1.5)      
        elif self.blastType == 'spazBomb':
            scorch.color = (1,1,1)            
        elif self.blastType == 'dirt':
            scorch.color = (0.5, 0.1, 0.02)
        else:
            scorch.color = (light.color[0]-0.05, light.color[1]-0.05, light.color[2]-0.07)

        if self.blastType not in ['firework', 'dirt']:
            bsUtils.animate(scorch,"presence",{0:0, 60:0.55, 2000:1, 5000:0})
            bs.gameTimer(13000,scorch.delete)
        elif self.blastType in ['dirt']:
            bsUtils.animate(scorch,"presence",{0:0, 60:0.55, 2000:1, 6700:1, 7250:0})
            bs.gameTimer(7250,scorch.delete)
        else:
            bsUtils.animate(scorch,"presence",{3000:1, 10000:1, 26000:0})
            bs.gameTimer(26000,scorch.delete)

        p = light.position
        if self.blastType == 'ice' or self.blastType == 'iceImpact' or self.blastType == 'stickyIce':
            bs.playSound(factory.hissSound,position=p)
            
        elif self.blastType == 'spazBomb':
            bs.playSound(bs.getSound('spazFall01'))

        elif self.blastType == 'firework':
            bs.playSound(factory.hissSound,position=p)

        elif self.blastType == 'killLaKill':
            bs.playSound(factory.getRandomExplodeSound(),position=p)
        else:  
            bs.playSound(factory.getRandomExplodeSound(),position=p)
            bs.playSound(factory.debrisFallSound,position=p)

        if self.blastType == 'tnt':
            intensity=5.0
        elif self.blastType == 'killLaKill':
            intensity=6.1
        elif self.blastType == 'firework':
            intensity=0.5
        elif self.blastType == 'qq':
            intensity=0.32
        elif self.blastType == 'boss':
            intensity=0.1
        elif self.blastType == 'dirt': 
            intensity=0.2
        else:
            intensity=1.0

        bs.shakeCamera(intensity)
        
        if self.blastType == 'normal':
            if don.bombBlast:
                def _explodeWithPowerup():
                    pType = bs.PowerupFactory().getRandomPowerupType()
                    bs.Powerup(position,pType).autoRetain()
                bs.gameTimer(100,_explodeWithPowerup) # looks better if we delay a bit
                
        if self.blastType == 'block':
            def _explodeWithPowerup():
                pType = bs.PowerupFactory().getRandomPowerupType()
                bs.Powerup(position,pType).autoRetain()
            bs.gameTimer(100,_explodeWithPowerup) # looks better if we delay a bit
        if self.blastType == 'goldenBomb':
            def _explodeWithPowerup():
                pType1 = bs.PowerupFactory().getRandomPowerupType()
                pType2 = bs.PowerupFactory().getRandomPowerupType()
                pType3 = bs.PowerupFactory().getRandomPowerupType()
                pType4 = bs.PowerupFactory().getRandomPowerupType()
                pType5 = bs.PowerupFactory().getRandomPowerupType()
                pType6 = bs.PowerupFactory().getRandomPowerupType()
                pType7 = bs.PowerupFactory().getRandomPowerupType()
                pType8 = bs.PowerupFactory().getRandomPowerupType()
                bs.Powerup(position,pType1).autoRetain()
                bs.Powerup(position,pType2).autoRetain()
                bs.Powerup(position,pType3).autoRetain()
                bs.Powerup(position,pType4).autoRetain()
                bs.Powerup(position,pType5).autoRetain()
                bs.Powerup(position,pType6).autoRetain()
                bs.Powerup(position,pType7).autoRetain()
                bs.Powerup(position,pType8).autoRetain()
            bs.gameTimer(100,_explodeWithPowerup) # looks better if we delay a bit

        # tnt is more epic..
        if self.blastType == 'tnt':
            bs.playSound(factory.getRandomExplodeSound(),position=p)
            def _extraBoom():
                bs.playSound(factory.getRandomExplodeSound(),position=p)
            bs.gameTimer(250,_extraBoom)
            def _extraDebrisSound():
                bs.playSound(factory.debrisFallSound,position=p)
                bs.playSound(factory.woodDebrisFallSound,position=p)
            bs.gameTimer(400,_extraDebrisSound)
            
        if self.blastType == 'tnt':
            if don.tntBlast:
                def _explodeWithPowerup():
                    pType1 = bs.PowerupFactory().getRandomPowerupType()
                    pType2 = bs.PowerupFactory().getRandomPowerupType()
                    pType3 = bs.PowerupFactory().getRandomPowerupType()
                    pType4 = bs.PowerupFactory().getRandomPowerupType()
                    pType5 = bs.PowerupFactory().getRandomPowerupType()
                    pType6 = bs.PowerupFactory().getRandomPowerupType()
                    pType7 = bs.PowerupFactory().getRandomPowerupType()
                    pType8 = bs.PowerupFactory().getRandomPowerupType()
                    bs.Powerup(position,pType1).autoRetain()
                    bs.Powerup(position,pType2).autoRetain()
                    bs.Powerup(position,pType3).autoRetain()
                    bs.Powerup(position,pType4).autoRetain()
                    bs.Powerup(position,pType5).autoRetain()
                    bs.Powerup(position,pType6).autoRetain()
                    bs.Powerup(position,pType7).autoRetain()
                    bs.Powerup(position,pType8).autoRetain()
                bs.gameTimer(100,_explodeWithPowerup) # looks better if we delay a bit

    def getFactory(cls):
        activity = bs.getActivity()
        try: return activity._sharedBombFactory
        except Exception:
            f = activity._sharedBombFactory = BombFactory()
            return f

    def handleMessage(self, msg):
        self._handleMessageSanityCheck()

        if isinstance(msg, bs.DieMessage):
            self.node.delete()

        elif isinstance(msg, DirtBombOutMessage):
            node = bs.getCollisionInfo("opposingNode")
            if node is not None and node.exists(): 
                if node in getattr(self, 'dirt_nodes', []): self.dirt_nodes.remove(node)
                node.handleMessage(DirtBombOutMessage())

        elif isinstance(msg, ExplodeHitMessage):
            node = bs.getCollisionInfo("opposingNode")
            if node is not None and node.exists():
                t = self.node.position

                # new
                mag = 2000.0
                if self.blastType == 'ice' or self.blastType == 'iceImpact' or self.blastType == 'stickyIce': mag *= 0.5
                elif self.blastType == 'landMine': mag *= 2.5
                elif self.blastType == 'firework': mag *= 0.2
                elif self.blastType == 'tp': mag *= 0.65
                elif self.blastType == 'qq': mag *= 0.65
                elif self.blastType == 'killLaKill': mag *= 1.75
                elif self.blastType == 'tnt': mag *= 2.0
                elif self.blastType == 'poison': mag *= 0.4
                elif self.blastType == 'boss': mag *= 5.0
                elif self.blastType == 'tbomb': mag *= 0.0
                elif self.blastType == 'gluebomb': mag *= 0.01
                elif self.blastType == 'weedbomb': mag *= 0.0
                elif self.blastType == 'curseBomb': mag*= 0.0
                elif self.blastType == 'characterBomb': mag*= 0.0
                elif self.blastType == 'mjBomb': mag*= 0.0
                elif self.blastType == 'icyTrio': mag*= 0.0
                elif self.blastType == 'boomBomb': mag*= 0.0
                elif self.blastType == 'trioBomb': mag*= 0.0
                elif self.blastType == 'speedBomb': mag*= 0.0
                elif self.blastType == 'healBomb': mag*= 0.0
                elif self.blastType == 'nightBomb': mag*= 4.0
                elif self.blastType == 'blastBomb': mag*= 0.4
                elif self.blastType == 'revengeBomb': mag*= 0.4
                elif self.blastType == 'knockBomb': mag*= 0.5
                elif self.blastType == 'stickyIce': mag*= 0.0
                elif self.blastType == 'stickyIceTrio': mag*= 0.0
                elif self.blastType == 'use': mag *= 0.2
                elif self.blastType == 'antiGrav': mag *= 0.1

                
                if self.blastType not in ['dirt']:
                    node.handleMessage(bs.HitMessage(
                        pos=t,
                        velocity=(0,0,0),
                        magnitude=mag,
                        hitType=self.hitType,
                        hitSubType=self.hitSubType,
                        radius=self.radius,
                        sourcePlayer=self.sourcePlayer, 
                        kickBack = 0))
                if self.blastType == "ice" or self.blastType == 'iceImpact' or self.blastType == "stickyIce":
                    bs.playSound(Bomb.getFactory().freezeSound, 10, position=t)
                    node.handleMessage(bs.FreezeMessage())
                node = bs.getCollisionInfo("opposingNode")
                if self.blastType == "weedbomb" and not node.getNodeType() != 'spaz':
                    bs.playSound(Bomb.getFactory().hissSound, 9, position=t)
                    def weed():
                	    node.handleMessage("knockout",10000)
                    bs.gameTimer(2000,bs.Call(weed)) #delay (forgot about the epic)
                    bs.gameTimer(5500,bs.Call(weed))
                    bs.gameTimer(8500,bs.Call(weed))
                    def hiccups():
                    	bs.emitBGDynamics(position=(node.position[0],node.position[1]-1.2,node.position[2]), velocity=(0,0.05,0), count=random.randrange(100,270), scale=1+random.random(), spread=0.71, chunkType='sweat') #reminds me of tom and jerry
                    bs.gameTimer(1000,bs.Call(hiccups))
                    bs.gameTimer(2500,bs.Call(hiccups)) #showing we are alive
                    bs.gameTimer(5000,bs.Call(hiccups))
                    bs.gameTimer(7500,bs.Call(hiccups))
                    def look():
                    	text = bsUtils.PopupText("getting high",color=(2.55,1.53,1.02), scale=0.7, randomOffset=0.2, offset=(0,-1,0), position=(node.position[0],node.position[1]-1.2,node.position[2])).autoRetain()
                    bs.gameTimer(1500,bs.Call(look))
                    bs.gameTimer(3000,bs.Call(look))
                    bs.gameTimer(8000,bs.Call(look))
                    bs.gameTimer(9000,bs.Call(look))
                    bs.gameTimer(10000,bs.Call(look))
                    def look():
                    	text = bsUtils.PopupText("getting tired",color=(2.55, 1.48, 0.77), scale=0.75, randomOffset=0.2, offset=(0,-1,0), position=(node.position[0],node.position[1]-1.2,node.position[2])).autoRetain()
                    bs.gameTimer(1460,bs.Call(look))
                    bs.gameTimer(2960,bs.Call(look))
                    bs.gameTimer(4000,bs.Call(look))
                    bs.gameTimer(5460,bs.Call(look))
                    bs.gameTimer(6000,bs.Call(look))
                    bs.gameTimer(7960,bs.Call(look))
                elif self.blastType == "firework":
                    node.punchMaterials, node.rollerMaterials, node.extrasMaterials = [], [], []
                    node.holdPositionPressed, node.jumpPressed = True, True
                    node.handleMessage('knockout', 300.0)
                    self.paralized_counts = getattr(self, "paralized_counts", 0)+1
                   # mapBounds = self.getActivity().getMap().spawnPoints
                   # node.handleMessage("stand", random.uniform(mapBounds[0][0], mapBounds[1][0]), random.uniform(mapBounds[0][1], mapBounds[1][1]), random.uniform(mapBounds[0][2], mapBounds[1][2]), random.randrange(0,360))
                   # self._teleported = True
                elif self.blastType == "poison":
                    node.handleMessage(PoisonBombHitMessage())
                elif self.blastType == "qq":
                    node.handleMessage("knockout", 110.0)
                elif self.blastType == "tp":
                    mapBounds = self.getActivity().getMap().spawnPoints
                    node.handleMessage("stand", random.uniform(mapBounds[0][0], mapBounds[1][0]), random.uniform(mapBounds[0][1], mapBounds[1][1]), random.uniform(mapBounds[0][2], mapBounds[1][2]), random.randrange(0,360))
                    self._teleported = True
                    node.handleMessage("knockout", 45.0)
                elif self.blastType == "curseBomb":
                    node.handleMessage(bs.PowerupMessage(powerupType = 'curse'))
                elif self.blastType == "characterBomb":
                    node.handleMessage(bs.PowerupMessage(powerupType = 'randomCharacter'))
                elif self.blastType == "mjBomb":
                    node.handleMessage(bs.PowerupMessage(powerupType = 'mj'))
                elif self.blastType == "icyTrio":
                    node.handleMessage(bs.PowerupMessage(powerupType = 'icyMess'))
                elif self.blastType == "boomBomb":
                    node.handleMessage(bs.PowerupMessage(powerupType = 'icyMess'))
                elif self.blastType == "trioBomb":
                    node.handleMessage(bs.PowerupMessage(powerupType = 'impactMess'))
                elif self.blastType == "speedBomb":
                    bsSomething.ShockWave(position=self.node.position)
                elif self.blastType == "healBomb":
                    node.handleMessage(bs.PowerupMessage(powerupType = 'health'))
                elif self.blastType == "stickyIceTrio":
                    node.handleMessage(bs.PowerupMessage(powerupType = 'stickyIceMess'))
                elif self.blastType == "nightBomb":
                    bs.getSharedObject('globals').tint = (0.6,0.6,0.9)
                    light = bs.newNode('light',
                               attrs={'position':self.node.position,
                                          'radius':1.0,
                                          'heightAttenuated':False,
                                          'color': (0,1,6)})
                    bs.animate(light,'radius',{0:3.0,300:5,600:0})       
                    bsUtils.PopupText(u"\ue00cNIGHT\ue00c",color=(1,2,1),scale=5.2,position=self.node.position).autoRetain()
                    bs.emitBGDynamics(position=self.node.position,velocity=(0,0,0),count=800,spread=1.7,chunkType='spark');
                elif self.blastType == "knockBomb":
                    node.handleMessage("knockout", 1000.7)
                    node.handleMessage("knockout", 400.7)
                    bsUtils.PopupText(u"\ue00cKnocked OUt\ue00c",color=(1,2,1),scale=1.2,position=self.node.position).autoRetain()
                elif self.blastType == "boss":
                    node.handleMessage("knockout", 100.0)
                elif self.blastType == "revengeBomb":
                    node.handleMessage(bs.PowerupMessage(powerupType = 'stickyIceMess'))
                elif self.blastType == "blastBomb":
                    node.handleMessage("knockout", 100.0)
                elif self.blastType == "dirt" and node.getNodeType() == "spaz":
                    bs.playSound(Bomb.getFactory().splatterSound, 10, position=t)
                    node.handleMessage(bs.SlowMoveMessage())
                    if not hasattr(self, 'dirt_nodes'): self.dirt_nodes=[node]
                    elif node not in self.dirt_nodes: self.dirt_nodes.append(node)
                elif self.blastType == "use":
                    node = bs.getCollisionInfo('opposingNode')
                    def raiseSpaz():
                        if node.getDelegate().isAlive():
                            node.handleMessage("impulse", node.position[0], node.position[1] + 0.5, node.position[2], 0, 5, 0,
                                               3, 10, 0, 0, 0, 5, 0)
                            bs.gameTimer(50, raiseSpaz)
                    raiseSpaz()
        else:
            bs.Actor.handleMessage(self, msg)

class Bomb(bs.Actor):
    """
    category: Game Flow Classes
    
    A bomb and its variants such as land-mines and tnt-boxes.
    """

    def __init__(self, position=(0,1,0), velocity=(0,0,0), bombType='normal',
                 blastRadius=2.0, sourcePlayer=None, owner=None):
        bs.Actor.__init__(self)

        factory = self.getFactory()

        if not bombType in ('ice','impact','landMine','normal','sticky','tnt', 'firework', 'killLaKill', 'qq', 'tp', 'poison', 'dirt','ballon','Block','iceImpact','goldenBomb','tbomb','gluebomb','weedbomb','spazBomb','curseBomb','nightBomb','healBomb','knockBomb','speedBomb','characterBomb','mjBomb','trioBomb','stickyIce','boomBomb','icyTrio','stickyIceTrio','blastBomb','revengeBomb','use','antiGrav'):
            raise Exception("invalid bomb type: " + bombType)
        self.bombType = bombType
        self._exploded = False

        if self.bombType == 'sticky' or self.bombType == 'stickyIce': self._lastStickySoundTime = 0

        self.blastRadius = blastRadius
        if self.bombType == 'ice': self.blastRadius *= 1.2
        elif self.bombType == 'iceImpact': self.blastRadius *= 0.7 # Change blast radius for our bomb
        elif self.bombType == 'qq': self.blastRadius *= 0.9
        elif self.bombType == 'firework': self.blastRadius *= 1.75
        elif self.bombType == 'impact': self.blastRadius *= 0.7
        elif self.bombType == 'killLaKill': self.blastRadius *= 0.945
        elif self.bombType == 'landMine': self.blastRadius *= 0.7
        elif self.bombType == 'tnt': self.blastRadius *= 1.45
        elif self.bombType == 'poison': self.blastRadius *= 1.2
        elif self.bombType == 'goldenBomb': self.blastRadius *= 4
        elif self.bombType == 'tbomb': self.blastRadius *= 0.1
        elif self.bombType == 'gluebomb': self.blastRadius *= 0.5
        elif self.bombType == 'weedbomb': self.blastRadius *= 0.9
        elif self.bombType == 'spazBomb': self.blastRadius *= 0.75
        elif self.bombType == 'curseBomb': self.blastRadius *= 0.7
        elif self.bombType == 'characterBomb': self.blastRadius *= 0.7
        elif self.bombType == 'mjBomb': self.blastRadius *= 0.7
        elif self.bombType == 'icyTrio': self.blastRadius *= 0.7
        elif self.bombType == 'boomBomb': self.blastRadius *= 0.7
        elif self.bombType == 'trioBomb': self.blastRadius *= 1.2
        elif self.bombType == 'speedBomb': self.blastRadius *= 0.7
        elif self.bombType == 'healBomb': self.blastRadius *= 0.7
        elif self.bombType == 'nightBomb': self.blastRadius *= 20.0
        elif self.bombType == 'blastBomb': self.blastRadius *= 1.0
        elif self.bombType == 'revengeBomb': self.blastRadius *= 1.0
        elif self.bombType == 'knockBomb': self.blastRadius *= 0.5
        elif self.bombType == 'stickyIceTrio': self.blastRadius *= 0.8
        elif self.bombType == 'use': self.blastRadius *= 0.7
        elif self.bombType in ('Block'): self.blastRadius *= 1.2

        self._explodeCallbacks = []
        
        # the player this came from
        self.sourcePlayer = sourcePlayer

        # by default our hit type/subtype is our own, but we pick up types of
        # whoever sets us off so we know what caused a chain reaction
        self.hitType = 'explosion'
        self.hitSubType = self.bombType

        # if no owner was provided, use an unconnected node ref
        if owner is None: owner = bs.Node(None)

        # the node this came from
        self.owner = owner

        # adding footing-materials to things can screw up jumping and flying
        # since players carrying those things
        # and thus touching footing objects will think they're on solid ground..
        # perhaps we don't wanna add this even in the tnt case?..
        if self.bombType == 'tnt' or self.bombType == 'Block':
            materials = (factory.bombMaterial,
                         bs.getSharedObject('footingMaterial'),
                         bs.getSharedObject('objectMaterial'))
        else:
            materials = (factory.bombMaterial,
                         bs.getSharedObject('objectMaterial'))
           
        if self.bombType == 'iceImpact': materials = materials + (factory.impactBlastMaterial,) # Materials of impact bomb
            
        if self.bombType == 'impact':
            materials = materials + (factory.impactBlastMaterial,)
        elif self.bombType == 'tbomb':
            materials = materials + (factory.impactBlastMaterial,)   
        elif self.bombType == 'gluebomb':
            materials = materials + (factory.impactBlastMaterial,)
        elif self.bombType == 'spazBomb':
            materials = materials + (factory.impactBlastMaterial,)
        elif self.bombType == 'weedbomb':
            materials = materials + (factory.impactBlastMaterial,)
        elif self.bombType == 'qq':
            materials = materials + (factory.impactBlastMaterial,)
        elif self.bombType == 'knockBomb':
            materials = materials + (factory.impactBlastMaterial,)
        elif self.bombType == 'characterBomb':
            materials = materials + (factory.impactBlastMaterial,)
        elif self.bombType == 'mjBomb':
            materials = materials + (factory.impactBlastMaterial,)
        elif self.bombType == 'icyTrio':
            materials = materials + (factory.impactBlastMaterial,)   
        elif self.bombType == 'boomBomb':
            materials = materials + (factory.impactBlastMaterial,)
        elif self.bombType == 'trioBomb':
            materials = materials + (factory.impactBlastMaterial,)
        elif self.bombType == 'stickyIceTrio':
            materials = materials + (factory.impactBlastMaterial,)
        elif self.bombType == 'curseBomb':
            materials = materials + (factory.impactBlastMaterial,)
        elif self.bombType == 'healBomb':
            materials = materials + (factory.impactBlastMaterial,)
        elif self.bombType == 'speedBomb':
            materials = materials + (factory.impactBlastMaterial,)
        elif self.bombType == 'antiGrav':
            materials = materials + (factory.impactBlastMaterial,)
        elif self.bombType == 'landMine':
            materials = materials + (factory.landMineNoExplodeMaterial,)
        elif self.bombType == 'nightBomb':
            materials = materials + (factory.landMineNoExplodeMaterial,)
        elif self.bombType == 'use':
            materials = materials + (factory.landMineNoExplodeMaterial,)
        elif self.bombType == 'blastBomb':
            materials = materials + (factory.landMineNoExplodeMaterial,)
        elif self.bombType == 'revengeBomb':
            materials = materials + (factory.landMineNoExplodeMaterial,)

        if self.bombType == 'sticky' or self.bombType == 'stickyIce':
            materials = materials + (factory.stickyMaterial,)
        elif self.bombType not in ['dirt']:
            materials = materials + (factory.normalSoundMaterial,)

        if self.bombType == 'landMine':
            self.node = bs.newNode('prop', delegate=self, attrs={
                'position':position,
                'velocity':velocity,
                'model':factory.landMineModel,
                'lightModel':factory.landMineModel,
                'body':'landMine',
                'shadowSize':0.44,
                'colorTexture':factory.landMineTex,
                'reflection':'powerup',
                'reflectionScale':[rScale] if bombType != 'landMine' else ((0+random.random()*20.0),(0+random.random()*20.0),(0+random.random()*20.0)),
                'materials':materials})
            
        elif self.bombType == 'iceImpact':
            #print("It's works!") # Debug message
            fuseTime = 20000
            self.node = bs.newNode('prop', delegate=self, attrs={
                'position':position,
                'velocity':velocity,
                'body':'sphere',
                'model':factory.iceImpactModel,
                'shadowSize':0.3,
                'colorTexture':factory.iceImpactTex,
                'reflection':'powerup',
                'reflectionScale':[rScale] if bombType != 'iceImpact' else ((0+random.random()*20.0),(0+random.random()*20.0),(0+random.random()*20.0)),
                'materials':materials}) # Make a bomb settings
                
        elif self.bombType == 'antiGrav':
            fuseTime = 30000
            self.node = bs.newNode('prop', delegate=self, attrs={
                'position': position,
                'velocity': velocity,
                'body': 'sphere',
                'model': factory.impactBombModel,
                'shadowSize': 0.3,
                'colorTexture': factory.newTex,
                'reflection': 'powerup',
                'reflectionScale': [rScale] if bombType != 'antiGrav' else ((0+random.random()*20.0),(0+random.random()*20.0),(0+random.random()*20.0)),
                'materials': materials})
                
        elif self.bombType == 'characterBomb':
            #print("It's works!") # Debug message
            fuseTime = 20000
            self.node = bs.newNode('prop', delegate=self, attrs={
                'position':position,
                'velocity':velocity,
                'body':'sphere',
                'model':factory.characterBombModel,
                'shadowSize':0.3,
                'colorTexture':factory.characterBombTex,
                'reflection':'powerup',
                'reflectionScale':[rScale] if bombType != 'characterBomb' else ((0+random.random()*20.0),(0+random.random()*20.0),(0+random.random()*20.0)),
                'materials':materials}) # Make a bomb settings
                
        elif self.bombType == 'speedBomb':
            #print("It's works!") # Debug message
            fuseTime = 20000
            self.node = bs.newNode('prop', delegate=self, attrs={
                'position':position,
                'velocity':velocity,
                'body':'sphere',
                'model':factory.speedBombModel,
                'shadowSize':0.3,
                'colorTexture':factory.speedBombTex,
                'reflection':'powerup',
                'reflectionScale':[rScale] if bombType != 'speedBomb' else ((0+random.random()*20.0),(0+random.random()*20.0),(0+random.random()*20.0)),
                'materials':materials}) # Make a bomb settings
                
        elif self.bombType == 'mjBomb':
            #print("It's works!") # Debug message
            fuseTime = 20000
            self.node = bs.newNode('prop', delegate=self, attrs={
                'position':position,
                'velocity':velocity,
                'body':'sphere',
                'model':factory.characterBombModel,
                'shadowSize':0.3,
                'colorTexture':factory.characterBombTex,
                'reflection':'powerup',
                'reflectionScale':[rScale] if bombType != 'mjBomb' else ((0+random.random()*20.0),(0+random.random()*20.0),(0+random.random()*20.0)),
                'materials':materials}) # Make a bomb settings
                
        elif self.bombType == 'icyTrio':
            #print("It's works!") # Debug message
            fuseTime = 20000
            self.node = bs.newNode('prop', delegate=self, attrs={
                'position':position,
                'velocity':velocity,
                'body':'sphere',
                'model':factory.icyTrioModel,
                'shadowSize':0.3,
                'colorTexture':factory.icyTrioTex,
                'reflection':'powerup',
                'reflectionScale':[rScale] if bombType != 'icyTrio' else ((0+random.random()*20.0),(0+random.random()*20.0),(0+random.random()*20.0)),
                'materials':materials}) # Make a bomb settings
                
        elif self.bombType == 'boomBomb':
            #print("It's works!") # Debug message
            fuseTime = 20000
            self.node = bs.newNode('prop', delegate=self, attrs={
                'position':position,
                'velocity':velocity,
                'body':'sphere',
                'model':factory.boomBombModel,
                'shadowSize':0.3,
                'colorTexture':factory.boomBombTex,
                'reflection':'powerup',
                'reflectionScale':[rScale] if bombType != 'boomBomb' else ((0+random.random()*20.0),(0+random.random()*20.0),(0+random.random()*20.0)),
                'materials':materials}) # Make a bomb settings
                
        elif self.bombType == 'trioBomb':
            #print("It's works!") # Debug message
            fuseTime = 20000
            self.node = bs.newNode('prop', delegate=self, attrs={
                'position':position,
                'velocity':velocity,
                'body':'sphere',
                'model':factory.characterBombModel,
                'shadowSize':0.3,
                'colorTexture':factory.characterBombTex,
                'reflection':'powerup',
                'reflectionScale':[rScale] if bombType != 'trioBomb' else ((0+random.random()*20.0),(0+random.random()*20.0),(0+random.random()*20.0)),
                'materials':materials}) # Make a bomb settings
                
        elif self.bombType == 'curseBomb':
            #print("It's works!") # Debug message
            fuseTime = 20000
            self.node = bs.newNode('prop', delegate=self, attrs={
                'position':position,
                'velocity':velocity,
                'body':'sphere',
                'model':factory.curseBombModel,
                'shadowSize':0.3,
                'colorTexture':factory.curseBombTex,
                'reflection':'powerup',
                'reflectionScale':[rScale] if bombType != 'curseBomb' else ((0+random.random()*20.0),(0+random.random()*20.0),(0+random.random()*20.0)),
                'materials':materials}) # Make a bomb settings
                
        elif self.bombType == 'healBomb':
            #print("It's works!") # Debug message
            fuseTime = 20000
            self.node = bs.newNode('prop', delegate=self, attrs={
                'position':position,
                'velocity':velocity,
                'body':'sphere',
                'model':factory.healBombModel,
                'shadowSize':0.3,
                'colorTexture':factory.healBombTex,
                'reflection':'powerup',
                'reflectionScale':[rScale] if bombType != 'healBomb' else ((0+random.random()*20.0),(0+random.random()*20.0),(0+random.random()*20.0)),
                'materials':materials}) # Make a bomb settings
                
        elif self.bombType == 'knockBomb':
            #print("It's works!") # Debug message
            fuseTime = 20000
            self.node = bs.newNode('prop', delegate=self, attrs={
                'position':position,
                'velocity':velocity,
                'body':'sphere',
                'model':factory.knockBombModel,
                'shadowSize':0.3,
                'colorTexture':factory.knockBombTex,
                'reflection':'powerup',
                'reflectionScale':[rScale] if bombType != 'knockBomb' else ((0+random.random()*20.0),(0+random.random()*20.0),(0+random.random()*20.0)),
                'materials':materials}) # Make a bomb settings
                
        elif self.bombType == 'stickyIceTrio':
            #print("It's works!") # Debug message
            fuseTime = 20000
            self.node = bs.newNode('prop', delegate=self, attrs={
                'position':position,
                'velocity':velocity,
                'body':'sphere',
                'model':factory.stickyIceTrioBombModel,
                'shadowSize':0.3,
                'colorTexture':factory.stickyIceTrioTex,
                'reflection':'powerup',
                'reflectionScale':[rScale] if bombType != 'stickyIceTrio' else ((0+random.random()*20.0),(0+random.random()*20.0),(0+random.random()*20.0)),
                'materials':materials}) # Make a bomb settings
                
        elif self.bombType == 'spazBomb':
            fuseTime = 20000
            bs.playSound(bs.getSound('spazImpact01'))
            self.node = bs.newNode('prop', delegate=self, attrs={
                'position':position,
                'velocity':velocity,
                'body':'sphere',
                'model':factory.spazBombModel,
                'shadowSize':0.3,
                'modelScale':4.028,
                'colorTexture':factory.texSpazBomb,
                'reflection':'powerup',
                'reflectionScale':[rScale] if bombType != 'spazBomb' else ((0+random.random()*20.0),(0+random.random()*20.0),(0+random.random()*20.0)),
                'materials':materials})
            bsUtils.animate(self.node,"modelScale",{0:0, 200:1.3, 260:1})    
         #  bsUtils.animateArray(self.node,"position",3,{0:(1.830377363, 4.228850685, 3.803988636),10000:(4.148493267, 4.429165244, -6.588618549),20000:(-5.422572086, 4.228850685, 2.803988636),25000:(-6.859406739, 4.429165244, -6.588618549),30000:(-6.859406739, 4.429165244, -6.588618549),35000:(3.148493267, 4.429165244, -6.588618549),40000:(1.830377363, 4.228850685, 2.803988636),45000:(-5.422572086, 4.228850685, 2.803988636),50000:(-5.422572086, 4.228850685, 2.803988636),55000:(1.830377363, 4.228850685, 2.803988636),60000:(3.148493267, 4.429165244, -6.588618549),70000:(1.830377363, 4.228850685, 2.803988636),75000:(3.148493267, 4.429165244, -6.588618549),80000:(-5.422572086, 4.228850685, 2.803988636),90000:(-6.859406739, 4.429165244, -6.588618549),95000:(-6.859406739, 4.429165244, -6.588618549)},loop = True)                

                
        elif self.bombType == 'tbomb':
            fuseTime = 20000
            self.node = bs.newNode('prop', delegate=self, attrs={
                'position':position,
                'velocity':velocity,
                'body':'sphere',
                'model':factory.tbombModel,
                'shadowSize':0.3,
                'colorTexture':factory.tbombTex,
                'reflection':'powerup',
                'reflectionScale':[rScale] if bombType != 'tbomb' else ((0+random.random()*20.0),(0+random.random()*20.0),(0+random.random()*20.0)),
                'materials':materials})
            bsUtils.animate(self.node,"modelScale",{0:0, 200:1.3, 260:1})    
            
        elif self.bombType == 'gluebomb':
            fuseTime = 20000
            self.node = bs.newNode('prop', delegate=self, attrs={
                'position':position,
                'velocity':velocity,
                'body':'puck',
                'model':factory.gluebombModel,
                'shadowSize':0.3,
                'modelScale':0.028,
                'colorTexture':factory.gluebombTex,
                'reflectionScale':[rScale] if bombType != 'gluebomb' else ((0+random.random()*20.0),(0+random.random()*20.0),(0+random.random()*20.0)),
                'materials':materials})         

        elif self.bombType == 'weedbomb':
            fuseTime = 90000
            self.node = bs.newNode('prop', delegate=self, attrs={
                'position':position,
                'velocity':velocity,
                'body':'sphere',
                'model':factory.weedbombModel,
                'shadowSize':0.3,
                'colorTexture':factory.weedbombTex,
                'reflection':'powerup',
                'reflectionScale':[rScale] if bombType != 'weedbomb' else ((0+random.random()*20.0),(0+random.random()*20.0),(0+random.random()*20.0)),
                'materials':materials})
            bsUtils.animate(self.node,"modelScale",{0:0, 200:1.3, 260:1})                

        elif self.bombType == 'tnt':
            self.node = bs.newNode('prop', delegate=self, attrs={
                'position':position,
                'velocity':velocity,
                'model':factory.tntModel,
                'lightModel':factory.tntModel,
                'body':'crate',
                'shadowSize':0.5,
                'colorTexture':factory.tntTex,
                'reflection':'soft',
                'reflectionScale':[rScale] if bombType != 'tnt' else ((0+random.random()*20.0),(0+random.random()*20.0),(0+random.random()*20.0)),
                'materials':materials})
                
        elif self.bombType == 'Block':
            self.node = bs.newNode('prop', delegate=self, attrs={
                'position':position,
                'velocity':velocity,
                'model':factory.blockModel,
                'lightModel':factory.blockModel,
                'body':'crate',
                'shadowSize':0.5,
                'colorTexture':factory.blockTex,
                'reflection':'soft',
                'reflectionScale':[rScale] if bombType != 'Block' else ((0+random.random()*20.0),(0+random.random()*20.0),(0+random.random()*20.0)),
                'materials':materials})            
            
        elif self.bombType == 'impact':
            fuseTime = 20000
            self.node = bs.newNode('prop', delegate=self, attrs={
                'position':position,
                'velocity':velocity,
                'body':'sphere',
                'model':factory.impactBombModel,
                'modelScale':0.0,
                'shadowSize':0.3,
                'colorTexture':factory.impactTex,
                'reflection':'powerup',
                'reflectionScale':[rScale] if bombType != 'impact' else ((0+random.random()*20.0),(0+random.random()*20.0),(0+random.random()*20.0)),
                'materials':materials})
            self.armTimer = bs.Timer(200, bs.WeakCall(self.handleMessage,
                                                      ArmMessage()))
            self.warnTimer = bs.Timer(fuseTime-1700,
                                      bs.WeakCall(self.handleMessage,
                                                  WarnMessage()))

        elif self.bombType == 'dirt':
            fuseTime = 4500
            self.node = bs.newNode('bomb', delegate=self, attrs={
                'position':position,
                'velocity':velocity,
                'body':'sphere',
                'model':factory.stickyBombModel,
                'shadowSize':0.3,
                'colorTexture':factory.poisonTex,
                'reflection':'soft',
                'reflectionScale':[rScale] if bombType != 'dirt' else ((0+random.random()*20.0),(0+random.random()*20.0),(0+random.random()*20.0)),
                'materials':materials})
            sound = bs.newNode('sound', owner=self.node, attrs={
                'sound':factory.fuseSound,
                'volume':0.25})
            self.node.connectAttr('position', sound, 'position')
            bsUtils.animate(self.node, 'fuseLength', {0:1.0, fuseTime:0.0})
            
        elif self.bombType == 'firework':
            fuseTime = 4500
            self.node = bs.newNode('prop', delegate=self, attrs={
                'position':position,
                'velocity':velocity,
                'body':'crate',
                'bodyScale':0.9,
                'model':factory.fireworkModel,
                'shadowSize':0.3,
                'colorTexture':factory.fireworkTex,
                'reflection':'soft',
                'reflectionScale':[rScale] if bombType != 'firework' else ((0+random.random()*20.0),(0+random.random()*20.0),(0+random.random()*20.0)),
                'materials':materials})

        elif self.bombType == 'killLaKill':
            fuseTime = 3000
            self.node = bs.newNode('bomb', delegate=self, attrs={
                'position':position,
                'velocity':velocity,
                'body':'sphere',
                'model':factory.killLaKillModel,
                'shadowSize':0.3,
                'colorTexture':factory.killLaKillTex,
                'reflection':'sharper',
                'reflectionScale':[rScale] if bombType != 'killLaKill' else ((0+random.random()*20.0),(0+random.random()*20.0),(0+random.random()*20.0)),
                'materials':materials})
            sound = bs.newNode('sound', owner=self.node, attrs={
                'sound':factory.fuseSound,
                'volume':0.25})
            self.node.connectAttr('position', sound, 'position')
            bsUtils.animate(self.node, 'fuseLength', {0:1.0, fuseTime:0.0})

        elif self.bombType == 'poison':
            fuseTime = 4500
            self.node = bs.newNode('bomb', delegate=self, attrs={
                'position':position,
                'velocity':velocity,
                'body':'sphere',
                'model':factory.poisonModel,
                'shadowSize':0.3,
                'colorTexture':factory.poisonTex,
                'reflection':'soft',
                'reflectionScale':[1.0],
                'materials':materials})
            sound = bs.newNode('sound', owner=self.node, attrs={
                'sound':factory.fuseSound,
                'volume':0.25})
            self.node.connectAttr('position', sound, 'position')
            bsUtils.animate(self.node, 'fuseLength', {0:1.0, fuseTime:0.0})
              
        elif self.bombType == 'tp':
            fuseTime = 3000
            self.node = bs.newNode('bomb', delegate=self, attrs={
                'position':position,
                'velocity':velocity,
                'body':'sphere',
                'model':factory.tpModel,
                'shadowSize':0.3,
                'colorTexture':factory.tpTex,
                'reflection':'sharper',
                'reflectionScale':[rScale] if bombType != 'tp' else ((0+random.random()*20.0),(0+random.random()*20.0),(0+random.random()*20.0)),
                'materials':materials})
            sound = bs.newNode('sound', owner=self.node, attrs={
                'sound':factory.fuseSound,
                'volume':0.25})
            self.node.connectAttr('position', sound, 'position')
            bsUtils.animate(self.node, 'fuseLength', {0:1.0, fuseTime:0.0})

        elif self.bombType == 'ballon':
            self.node = bs.newNode('prop', delegate=self, attrs={
                'position':position,
                'velocity':velocity,
                'body':'sphere',
                'model':factory.ballonModel,
                'shadowSize':0.3,
                'colorTexture':factory.ballonTex,
                'reflection':'powerup',
                'reflectionScale':[rScale] if bombType != 'ballon' else ((0+random.random()*20.0),(0+random.random()*20.0),(0+random.random()*20.0)),
                'materials':materials,
                'extraAcceleration':(0,70,0)}) # Make a bomb settings 

        elif self.bombType == 'qq':
            fuseTime = 4500
            self.node = bs.newNode('bomb', delegate=self, attrs={
                'position':position,
                'velocity':velocity,
                'body':'sphere',
                'bodyScale':0.775,
                'density':1.772,
                'model':factory.qqModel,
                'shadowSize':0.3,
                'colorTexture':factory.qqTex,
                'owner':owner,
                'reflection':'sharper',
                'reflectionScale':[rScale] if bombType != 'qq' else ((0+random.random()*20.0),(0+random.random()*20.0),(0+random.random()*20.0)),
                'materials':materials})
            sound = bs.newNode('sound', owner=self.node, attrs={
                'sound':factory.fuseSound,
                'volume':0.25})
            self.node.connectAttr('position', sound, 'position')
            bsUtils.animate(self.node, 'fuseLength', {0:1.0, fuseTime:0.0})
            bs.gameTimer(4320, bs.WeakCall(self.handleMessage, bs.DieMessage()))
            bs.gameTimer(4319, bs.Call(self.explode))
        else:
            fuseTime = 3000
            if self.bombType == 'sticky':
                sticky = True
                model = factory.stickyBombModel
                rType = 'sharper'
                rScale = 1.8
            elif self.bombType == 'stickyIce':
                sticky = True
                model = factory.stickyBombModel
                rType = 'sharper'
                rScale = 1.8
            elif self.bombType == 'iceImpact':
                sticky = False
                model = factory.iceImpactModel
            elif self.bombType == 'curseBomb':
                sticky = False
                model = factory.curseBombModel
            elif self.bombType == 'stickyIceTrio':
                sticky = False
                model = factory.stickyIceTrioBombModel
            elif self.bombType == 'knockBomb':
                sticky = False
                model = factory.knockBombModel
            elif self.bombType == 'healBomb':
                sticky = False
                model = factory.healBombModel
            elif self.bombType == 'characterBomb':
                sticky = False
                model = factory.characterBombModel
            elif self.bombType == 'mjBomb':
                sticky = False
                model = factory.mjBombModel
            elif self.bombType == 'icyTrio':
                sticky = False
                model = factory.icyTrioModel
            elif self.bombType == 'boomBomb':
                sticky = False
                model = factory.boomBombModel
            elif self.bombType == 'trioBomb':
                sticky = False
                model = factory.trioBombModel
            elif self.bombType == 'speedBomb':
                sticky = False
                model = factory.speedBombModel
            elif self.bombType == 'spazBomb':
                sticky = False
                model = factory.spazBombModel
            else:
                sticky = False
                model = factory.bombModel
                rType = 'sharper'
                rScale = 1.8
            if self.bombType == 'ice' or self.bombType == 'iceImpact': tex = factory.iceTex
            elif self.bombType == 'curseBomb': tex = factory.curseBombTex
            elif self.bombType == 'stickyIceTrio': tex = factory.stickyIceTrioTex
            elif self.bombType == 'mjBomb': tex = factory.mjBombTex
            elif self.bombType == 'icyTrio': tex = factory.icyTrioTex
            elif self.bombType == 'boomBomb': tex = factory.boomBombTex
            elif self.bombType == 'trioBomb': tex = factory.trioBombTex
            elif self.bombType == 'characterBomb': tex = factory.characterBombTex
            elif self.bombType == 'speedBomb': tex = factory.speedBombTex
            elif self.bombType == 'healBomb': tex = factory.healBombTex
            elif self.bombType == 'nightBomb': tex = factory.nightBombTex
            elif self.bombType == 'use': tex = factory.useTex
            elif self.bombType == 'blastBomb': tex = factory.blastBombTex
            elif self.bombType == 'revengeBomb': tex = factory.revengeBombTex
            elif self.bombType == 'knockBomb': tex = factory.knockBombTex
            elif self.bombType == 'sticky': tex = factory.stickyTex
            elif self.bombType == 'stickyIce': tex = factory.stickyTex
            elif self.bombType == 'spazBomb': tex = factory.texSpazBomb
            else: tex = factory.regularTex
            self.node = bs.newNode('bomb', delegate=self, attrs={
                'position':position,
                'velocity':velocity,
                'model':model,
                'shadowSize':0.3,
                'colorTexture':tex,
                'sticky':sticky,
                'owner':owner,
                'reflection':rType,
                'reflectionScale':[rScale] if bombType != 'normal' else ((0+random.random()*20.0),(0+random.random()*20.0),(0+random.random()*20.0)),
                'materials':materials})

            sound = bs.newNode('sound', owner=self.node, attrs={
                'sound':factory.fuseSound,
                'volume':0.25})
            self.node.connectAttr('position', sound, 'position')
            bsUtils.animate(self.node, 'fuseLength', {0:1.0, fuseTime:0.0})
            
        # light the fuse!!!
        if (self.bombType not in ('landMine','tnt','Block','ballon')):
            bs.gameTimer(fuseTime, bs.WeakCall(self.handleMessage, ExplodeMessage()))
            prefixAnim = {0: (1, 0, 0), 250: (1, 1, 0), 250 * 2: (0, 1, 0), 250 * 3: (0, 1, 1), 250 * 4: (1, 0, 1),
                          250 * 5: (0, 0, 1), 250 * 6: (1, 0, 0)}
                          
            if self.bombType == 'ice': name = 'IcyBombs'
            elif self.bombType == 'impact': name = 'impactBombs'
            elif self.bombType == 'sticky': name = 'stickyBombs'
            elif self.bombType == 'tnt': name = 'tnt'
            elif self.bombType == 'landMine': name = 'landMines'
            elif self.bombType == 'normal': name = 'NoobBomb'
            elif self.bombType == 'iceImpact': name = 'iceImpact'
            elif self.bombType == 'curseBomb': name = 'CurseBomb'
            elif self.bombType == 'mjBomb': name = 'MJBomb'
            elif self.bombType == 'icyTrio': name = 'IcyTrio'
            elif self.bombType == 'boomBomb': name = 'Kaboom'
            elif self.bombType == 'trioBomb': name = 'impactTrio'
            elif self.bombType == 'characterBomb': name = 'Character'
            elif self.bombType == 'speedBomb': name = 'ShockWave'
            elif self.bombType == 'healBomb': name = 'healBomb'
            elif self.bombType == 'nightBomb': name = 'AtomBomb'
            elif self.bombType == 'use': name = 'FlyBomb'
            elif self.bombType == 'blastBomb': name = 'BlastBomb'
            elif self.bombType == 'revengeBomb': name = 'RevengeBomb'
            elif self.bombType == 'knockBomb': name = 'KnockBomb'
            elif self.bombType == 'stickyIce': name = 'StickyIce'
            elif self.bombType == 'spazBomb': name = 'SpazBomb'
            elif self.bombType == 'firework': name = 'FireWorks'
            elif self.bombType == 'qq': name = 'JumpinBomb'
            elif self.bombType == 'tp': name = 'teleBomb'
            elif self.bombType == 'weedbomb': name = 'WeedBomb'
            elif self.bombType == 'gluebomb': name = 'GlueBomb'
            elif self.bombType == 'tbomb': name = 'TeleportBomb'
            elif self.bombType == 'poison': name = 'PosionBomb'
            elif self.bombType == 'killLaKill': name = 'KillBomb'
            elif self.bombType == 'dirt': name = 'DirtBomb'
            elif self.bombType == 'goldenBomb': name = 'BlastyBomb'
            elif self.bombType == 'stickyIceTrio': name = 'StickyIceTrio'
            elif self.bombType == 'antiGrav': name = 'antiGrav'
                          
            if don.shieldBomb:               
                self.shield = bs.newNode('shield', owner=self.node,
                attrs={'color':(0,0,1),'radius':0.9})
                self.node.connectAttr('position', self.shield, 'position')   
                bs.animate(self.shield,'radius',{0:0.9,200:1,400:0.9},True)
                bsUtils.animateArray(self.shield, 'color', 3, prefixAnim, True)
                
            if don.bombLights:
                self.nodeLight = bs.newNode('light',
                attrs={'position': self.node.position,
                'color': (0,0,1),'radius': 0.1,'volumeIntensityScale': 0.2})
                self.node.connectAttr('position', self.nodeLight, 'position')
                bs.animateArray(self.nodeLight,'color',3,{0:(0,0,2),500:(0,2,0),1000:(2,0,0),1500:(2,2,0),2000:(2,0,2),2500:(0,1,6),3000:(1,2,0)},True) 
                #bs.animate(self.nodeLight, "intensity", {0:1.0, 1000:1.8, 2000:1.0}, loop = True)
                          
            if don.bombName:
                m = bs.newNode('math', owner=self.node, attrs={'input1': (0, 0.7, 0), 'operation': 'add'})
                self.node.connectAttr('position', m, 'input2')
                self.nodeText = bs.newNode('text',
                                           owner=self.node,
                                           attrs={'text': str(name),
                                                  'inWorld': True,
                                                  'shadow': 1.0,
                                                  'flatness': 1.0,
                                                  'color': (0,0,1),
                                                  'scale': 0.0,
                                                  'hAlign': 'center'})
                m.connectAttr('output', self.nodeText, 'position')
                bs.animate(self.nodeText, 'scale', {0: 0, 140: 0.016, 200: 0.01})
                bs.animateArray(self.nodeText,'color',3,{0:(2,2,0),600:(2,0,0),900:(0,2,0),1200:(0,0,2),1500:(2,0,2),
        1800:(2,1,0),2100:(0,2,2),2400:(2,2,0)},True)
                bs.emitBGDynamics(position=self.nodeText.position, velocity=self.node.position, count=200, scale=1.4,
                                  spread=2.01, chunkType='spark')
                                  
            if don.powerupTimer:
                defaultPowerupInterval = 4000
                self.powerupHurt = bs.newNode('shield', owner=self.node, attrs={'color':(1,1,1), 'radius':0.1, 'hurt':1, 'alwaysShowHealthBar':True})
                self.node.connectAttr('position',self.powerupHurt, 'position')
                bs.animate(self.powerupHurt, 'hurt', {0:0, defaultPowerupInterval-1000:1})
            bs.gameTimer(defaultPowerupInterval-1000, bs.Call(self.do_delete))
            
            '''
            if self.bombType == 'normal': 
                curve = bsUtils.animate(self.node,"modelScale",{0:0, 200:1.3, 260:1})
                bs.gameTimer(200,curve.delete)
            '''
                
        if don.bombSize:        
            curve = bsUtils.animate(self.node,"modelScale",{0:0, 200:1.3, 260:1})
            bs.gameTimer(200,curve.delete)

    def getSourcePlayer(self):
        """
        Returns a bs.Player representing the source of this bomb.
        """
        if self.sourcePlayer is None: return bs.Player(None) # empty player ref
        return self.sourcePlayer
        
    @classmethod
    def getFactory(cls):
        """
        Returns a shared bs.BombFactory object, creating it if necessary.
        """
        activity = bs.getActivity()
        try: return activity._sharedBombFactory
        except Exception:
            f = activity._sharedBombFactory = BombFactory()
            return f
            
    def do_delete(self):
        if self.node is not None and self.node.exists():
            if hasattr(self, "light") and self.light.exists(): 
                bs.animate(self.light, "radius", {0:0.078, 100:0})
                bs.gameTimer(100, self.light.delete)
            if hasattr(self, "powerupHurt") and self.powerupHurt.exists():
                bs.gameTimer(100, self.powerupHurt.delete)
                bs.gameTimer(100,self.nodeLight.delete)

    def onFinalize(self):
        bs.Actor.onFinalize(self)
        # release callbacks/refs so we don't wind up with dependency loops..
        self._explodeCallbacks = []
        
    def _handleDie(self,m):
        self.node.delete()
        if hasattr(self, "_timer") and self._timer is not None and self._timer.exists():
            self._timer.delete()
            self._timer = None
        
    def _handleOOB(self, msg):
        self.handleMessage(bs.DieMessage())

    def _handleImpact(self,m):
        node,body = bs.getCollisionInfo("opposingNode","opposingBody")
        # if we're an impact bomb and we came from this node, don't explode...
        # alternately if we're hitting another impact-bomb from the same source,
        # don't explode...
        try: nodeDelegate = node.getDelegate()
        except Exception: nodeDelegate = None
        if node is not None and node.exists():
            if (self.bombType == 'impact' and
                (node is self.owner
                 or (isinstance(nodeDelegate, Bomb)
                     and nodeDelegate.bombType == 'impact'
                     and nodeDelegate.owner is self.owner))): return
            elif (self.bombType == 'iceImpact' and
                (node is self.owner
                or (isinstance(nodeDelegate, Bomb)
                    and nodeDelegate.bombType == 'iceImpact'
                    and nodeDelegate.owner is self.owner))): return # Look on last comment   
            elif (self.bombType == 'tbomb' and
                (node is self.owner
                 or (isinstance(nodeDelegate, Bomb)
                     and nodeDelegate.bombType == 'tbomb'
                     and nodeDelegate.owner is self.owner))): return      
            elif (self.bombType == 'gluebomb' and
                (node is self.owner
                 or (isinstance(nodeDelegate, Bomb)
                     and nodeDelegate.bombType == 'gluebomb'
                     and nodeDelegate.owner is self.owner))): return        
            elif (self.bombType == 'weedbomb' and
                (node is self.owner
                 or (isinstance(nodeDelegate, Bomb)
                     and nodeDelegate.bombType == 'weedbomb'
                     and nodeDelegate.owner is self.owner))): return  
            elif (self.bombType == 'curseBomb' and
                (node is self.owner
                 or (isinstance(nodeDelegate, Bomb)
                     and nodeDelegate.bombType == 'curseBomb'
                     and nodeDelegate.owner is self.owner))): return  
            elif (self.bombType == 'knockBomb' and
                (node is self.owner
                 or (isinstance(nodeDelegate, Bomb)
                     and nodeDelegate.bombType == 'knockBomb'
                     and nodeDelegate.owner is self.owner))): return        
            elif (self.bombType == 'healBomb' and
                (node is self.owner
                 or (isinstance(nodeDelegate, Bomb)
                     and nodeDelegate.bombType == 'healBomb'
                     and nodeDelegate.owner is self.owner))): return           
            elif (self.bombType == 'characterBomb' and
                (node is self.owner
                 or (isinstance(nodeDelegate, Bomb)
                     and nodeDelegate.bombType == 'characterBomb'
                     and nodeDelegate.owner is self.owner))): return   
            elif (self.bombType == 'mjBomb' and
                (node is self.owner
                 or (isinstance(nodeDelegate, Bomb)
                     and nodeDelegate.bombType == 'mjBomb'
                     and nodeDelegate.owner is self.owner))): return         
            elif (self.bombType == 'icyTrio' and
                (node is self.owner
                 or (isinstance(nodeDelegate, Bomb)
                     and nodeDelegate.bombType == 'icyTrio'
                     and nodeDelegate.owner is self.owner))): return         
            elif (self.bombType == 'boomBomb' and
                (node is self.owner
                 or (isinstance(nodeDelegate, Bomb)
                     and nodeDelegate.bombType == 'boomBomb'
                     and nodeDelegate.owner is self.owner))): return      
            elif (self.bombType == 'trioBomb' and
                (node is self.owner
                 or (isinstance(nodeDelegate, Bomb)
                     and nodeDelegate.bombType == 'trioBomb'
                     and nodeDelegate.owner is self.owner))): return                          
            elif (self.bombType == 'speedBomb' and
                (node is self.owner
                 or (isinstance(nodeDelegate, Bomb)
                     and nodeDelegate.bombType == 'speedBomb'
                     and nodeDelegate.owner is self.owner))): return      
            elif (self.bombType == 'spazBomb' and
                (node is self.owner
                 or (isinstance(nodeDelegate, Bomb)
                     and nodeDelegate.bombType == 'spazBomb'
                     and nodeDelegate.owner is self.owner))): return   
            elif (self.bombType == 'stickyIceTrio' and
                (node is self.owner
                 or (isinstance(nodeDelegate, Bomb)
                     and nodeDelegate.bombType == 'stickyIceTrio'
                     and nodeDelegate.owner is self.owner))): return   
            elif (self.bombType == 'antiGrav' and
                  (node is self.owner
                   or (isinstance(nodeDelegate, Bomb)
                       and nodeDelegate.bombType == 'antiGrav'
                       and nodeDelegate.owner is self.owner))): return
            else:
                self.handleMessage(ExplodeMessage())
                
    def _handleDie(self, msg):
        if self.bombType == "antiGrav" and self.node.exists():
            aga = AntiGravArea(position=self.node.position, radius=self.blastRadius)
            bs.gameTimer(7000, aga.delete)
        self.node.delete()

    def _handleDropped(self,m):
        if self.bombType == 'ballon':
            self.handleMessage(bs.DieMessage())
        if self.bombType == 'landMine':
            self.armTimer = \
                bs.Timer(1250, bs.WeakCall(self.handleMessage, ArmMessage()))

        # once we've thrown a sticky bomb we can stick to it..
        elif self.bombType == 'sticky':
            def _safeSetAttr(node,attr,value):
                if node.exists(): setattr(node,attr,value)
            bs.gameTimer(
                250, lambda: _safeSetAttr(self.node, 'stickToOwner', True))
        elif self.bombType == 'stickyIce':
            def _safeSetAttr(node,attr,value):
                if node.exists(): setattr(node,attr,value)
            bs.gameTimer(
                250, lambda: _safeSetAttr(self.node, 'stickToOwner', True))

    def _handleSplat(self,m):
        node = bs.getCollisionInfo("opposingNode")
        if (node is not self.owner
                and bs.getGameTime() - self._lastStickySoundTime > 1000):
            self._lastStickySoundTime = bs.getGameTime()
            bs.playSound(self.getFactory().stickyImpactSound, 2.0,
                         position=self.node.position)

    def addExplodeCallback(self,call):
        """
        Add a call to be run when the bomb has exploded.
        The bomb and the new blast object are passed as arguments.
        """
        self._explodeCallbacks.append(call)
        
    def explode(self):
        """
        Blows up the bomb if it has not yet done so.
        """
        if self._exploded and self.bombType not in ['qq']: return
        self._exploded = True
        activity = self.getActivity()
        if activity is not None and self.node.exists():
        	if self.bombType == 'tbomb':
        	    self.owner.handleMessage(bs.StandMessage((self.node.position[0],self.node.position[1]-0.9,self.node.position[2])))
        	blast = Blast(position=self.node.position,velocity=self.node.velocity,blastRadius=self.blastRadius,blastType=self.bombType,sourcePlayer=self.sourcePlayer,hitType=self.hitType,hitSubType=self.hitSubType).autoRetain()
        for c in self._explodeCallbacks: c(self,blast)
            
        # we blew up so we need to go away
        if self.bombType not in ['qq']: bs.gameTimer(1, bs.WeakCall(self.handleMessage, bs.DieMessage()))
          
    def _handleWarn(self, m):
        if self.node.exists():
            if self.textureSequence.exists():
                self.textureSequence.rate = 30
                bs.playSound(self.getFactory().warnSound, 0.5,
                             position=self.node.position)
        else: return

    def _addMaterial(self, material):
        if not self.node.exists(): return
        materials = self.node.materials
        if not material in materials:
            self.node.materials = materials + (material,)
        
    def arm(self):
        """
        Arms land-mines and impact-bombs so
        that they will explode on impact.
        """
        if not self.node.exists(): return
        factory = self.getFactory()
        if self.bombType == 'landMine':
            self.textureSequence = \
                bs.newNode('textureSequence', owner=self.node, attrs={
                    'rate':30,
                    'inputTextures':(factory.landMineLitTex,
                                     factory.landMineTex)})
            bs.gameTimer(500,self.textureSequence.delete)
            # we now make it explodable.
            bs.gameTimer(250,bs.WeakCall(self._addMaterial,
                                         factory.landMineBlastMaterial))
        elif self.bombType == 'impact':
            self.textureSequence = \
                bs.newNode('textureSequence', owner=self.node, attrs={
                    'rate':100,
                    'inputTextures':(factory.impactLitTex,
                                     factory.impactTex,
                                     factory.impactTex)})
            bs.gameTimer(250, bs.WeakCall(self._addMaterial,
                                          factory.landMineBlastMaterial))
        elif self.bombType == 'iceImpact':# Sequence of textures
            self.textureSequence = \
                bs.newNode('textureSequence', owner=self.node, attrs={
                    'rate':100,
                    'inputTextures':(factory.impactLitTex,
                                     factory.impactTex,
                                     factory.impactTex)})
            bs.gameTimer(250, bs.WeakCall(self._addMaterial,
                                          factory.landMineBlastMaterial))
        elif self.bombType == 'mjBomb':# Sequence of textures
            self.textureSequence = \
                bs.newNode('textureSequence', owner=self.node, attrs={
                    'rate':100,
                    'inputTextures':(factory.impactLitTex,
                                     factory.impactTex,
                                     factory.impactTex)})
            bs.gameTimer(250, bs.WeakCall(self._addMaterial,
                                          factory.landMineBlastMaterial))
        elif self.bombType == 'icyTrio':# Sequence of textures
            self.textureSequence = \
                bs.newNode('textureSequence', owner=self.node, attrs={
                    'rate':100,
                    'inputTextures':(factory.impactLitTex,
                                     factory.impactTex,
                                     factory.impactTex)})
            bs.gameTimer(250, bs.WeakCall(self._addMaterial,
                                          factory.landMineBlastMaterial))
        elif self.bombType == 'boomBomb':# Sequence of textures
            self.textureSequence = \
                bs.newNode('textureSequence', owner=self.node, attrs={
                    'rate':100,
                    'inputTextures':(factory.impactLitTex,
                                     factory.impactTex,
                                     factory.impactTex)})
            bs.gameTimer(250, bs.WeakCall(self._addMaterial,
                                          factory.landMineBlastMaterial))
        elif self.bombType == 'stickyIceTrio':# Sequence of textures
            self.textureSequence = \
                bs.newNode('textureSequence', owner=self.node, attrs={
                    'rate':100,
                    'inputTextures':(factory.impactLitTex,
                                     factory.impactTex,
                                     factory.impactTex)})
            bs.gameTimer(250, bs.WeakCall(self._addMaterial,
                                          factory.landMineBlastMaterial))
        elif self.bombType == 'trioBomb':# Sequence of textures
            self.textureSequence = \
                bs.newNode('textureSequence', owner=self.node, attrs={
                    'rate':100,
                    'inputTextures':(factory.impactLitTex,
                                     factory.impactTex,
                                     factory.impactTex)})
            bs.gameTimer(250, bs.WeakCall(self._addMaterial,
                                          factory.landMineBlastMaterial))
        elif self.bombType == 'curseBomb':# Sequence of textures
            self.textureSequence = \
                bs.newNode('textureSequence', owner=self.node, attrs={
                    'rate':100,
                    'inputTextures':(factory.impactLitTex,
                                     factory.impactTex,
                                     factory.impactTex)})
            bs.gameTimer(250, bs.WeakCall(self._addMaterial,
                                          factory.landMineBlastMaterial))
        elif self.bombType == 'healBomb':# Sequence of textures
            self.textureSequence = \
                bs.newNode('textureSequence', owner=self.node, attrs={
                    'rate':100,
                    'inputTextures':(factory.impactLitTex,
                                     factory.impactTex,
                                     factory.impactTex)})
            bs.gameTimer(250, bs.WeakCall(self._addMaterial,
                                          factory.landMineBlastMaterial))
        elif self.bombType == 'knockBomb':# Sequence of textures
            self.textureSequence = \
                bs.newNode('textureSequence', owner=self.node, attrs={
                    'rate':100,
                    'inputTextures':(factory.impactLitTex,
                                     factory.impactTex,
                                     factory.impactTex)})
            bs.gameTimer(250, bs.WeakCall(self._addMaterial,
                                          factory.landMineBlastMaterial))
        elif self.bombType == 'characterBomb':# Sequence of textures
            self.textureSequence = \
                bs.newNode('textureSequence', owner=self.node, attrs={
                    'rate':100,
                    'inputTextures':(factory.impactLitTex,
                                     factory.impactTex,
                                     factory.impactTex)})
            bs.gameTimer(250, bs.WeakCall(self._addMaterial,
                                          factory.landMineBlastMaterial))
        elif self.bombType == 'weedbomb':
            self.textureSequence = \
                bs.newNode('textureSequence', owner=self.node, attrs={
                    'rate':100,
                    'inputTextures':(factory.impactLitTex,
                                     factory.impactTex,
                                     factory.impactTex)})
            bs.gameTimer(250, bs.WeakCall(self._addMaterial,
                                          factory.landMineBlastMaterial))
        elif self.bombType == 'gluebomb':
            self.textureSequence = \
                bs.newNode('textureSequence', owner=self.node, attrs={
                    'rate':100,
                    'inputTextures':(factory.impactLitTex,
                                     factory.impactTex,
                                     factory.impactTex)})
            bs.gameTimer(250, bs.WeakCall(self._addMaterial,
                                          factory.landMineBlastMaterial))
        elif self.bombType == 'speedBomb':
            self.textureSequence = \
                bs.newNode('textureSequence', owner=self.node, attrs={
                    'rate':100,
                    'inputTextures':(factory.impactLitTex,
                                     factory.impactTex,
                                     factory.impactTex)})
            bs.gameTimer(250, bs.WeakCall(self._addMaterial,
                                          factory.landMineBlastMaterial))
        elif self.bombType == 'spazBomb':
            self.textureSequence = \
                bs.newNode('textureSequence', owner=self.node, attrs={
                    'rate':100,
                    'inputTextures':(factory.impactLitTex,
                                     factory.impactTex,
                                     factory.impactTex)})
            bs.gameTimer(250, bs.WeakCall(self._addMaterial,
                                          factory.landMineBlastMaterial))
        else:
            raise Exception('arm() should only be called '
                            'on land-mines or impact bombs')
        self.textureSequence.connectAttr('outputTexture',
                                         self.node, 'colorTexture')
        bs.playSound(factory.activateSound, 0.5, position=self.node.position)
        
    def _handleHit(self, msg):
        isPunch = (msg.srcNode.exists() and msg.srcNode.getNodeType() == 'spaz')
        if self.bombType == 'qq':
            bs.emitBGDynamics(position=msg.pos, velocity=(1 + random.random(), 1 + random.random(), 1 + random.random()), count = 50 + random.randrange(10,100), spread=0.8, scale=0.6, chunkType = 'spark');
        # normal bombs are triggered by non-punch impacts..
        # impact-bombs by all impacts
        if (not self._exploded and not isPunch
            or self.bombType in ['impact', 'landMine','iceImpact','gluebomb','weedbomb','curseBomb','knockBomb','healBomb','characterBomb','mjBomb','trioBomb','speedBomb','spazBomb','boomBomb','icyTrio','stickyIceTrio','antiGrav']):
            # also lets change the owner of the bomb to whoever is setting
            # us off.. (this way points for big chain reactions go to the
            # person causing them)
            if msg.sourcePlayer not in [None]:
                self.sourcePlayer = msg.sourcePlayer

                # also inherit the hit type (if a landmine sets off by a bomb,
                # the credit should go to the mine)
                # the exception is TNT.  TNT always gets credit.
                if self.bombType != 'tnt':
                    self.hitType = msg.hitType
                    self.hitSubType = msg.hitSubType

            bs.gameTimer(100+int(random.random()*100),
                         bs.WeakCall(self.handleMessage, ExplodeMessage()))
        self.node.handleMessage(
            "impulse", msg.pos[0], msg.pos[1], msg.pos[2],
            msg.velocity[0], msg.velocity[1], msg.velocity[2],
            msg.magnitude, msg.velocityMagnitude, msg.radius, 0,
            msg.velocity[0], msg.velocity[1], msg.velocity[2])

        if msg.srcNode.exists():
            pass
        
    def handleMessage(self, msg):
        if isinstance(msg, ExplodeMessage): self.explode()
        elif isinstance(msg, ImpactMessage): self._handleImpact(msg)
        elif isinstance(msg, bs.PickedUpMessage):
            # change our source to whoever just picked us up *only* if its None
            # this way we can get points for killing bots with their own bombs
            # hmm would there be a downside to this?...
            if self.sourcePlayer is not None:
                self.sourcePlayer = msg.node.sourcePlayer
        elif isinstance(msg, SplatMessage): self._handleSplat(msg)
        elif isinstance(msg, bs.DroppedMessage): self._handleDropped(msg)
        elif isinstance(msg, bs.HitMessage): self._handleHit(msg)
        elif isinstance(msg, bs.DieMessage): self._handleDie(msg)
        elif isinstance(msg, bs.OutOfBoundsMessage): self._handleOOB(msg)
        elif isinstance(msg, ArmMessage): self.arm()
        elif isinstance(msg, WarnMessage): self._handleWarn(msg)
        else: bs.Actor.handleMessage(self, msg)

class TNTSpawner(object):
    """
    category: Game Flow Classes

    Regenerates TNT at a given point in space every now and then.
    """
    def __init__(self,position,respawnTime=30000):
        """
        Instantiate with a given position and respawnTime (in milliseconds).
        """
        self._position = position
        self._tnt = None
        self._update()
        self._updateTimer = bs.Timer(1000,bs.WeakCall(self._update),repeat=True)
        self._respawnTime = int(random.uniform(0.8,1.2)*respawnTime)
        self._waitTime = 0
        
    def _update(self):
        tntAlive = self._tnt is not None and self._tnt.node.exists()
        if not tntAlive:
            # respawn if its been long enough.. otherwise just increment our
            # how-long-since-we-died value
            if self._tnt is None or self._waitTime >= self._respawnTime:
                self._tnt = Bomb(position=self._position,bombType='tnt')
                self._waitTime = 0
            else: self._waitTime += 1000'
exec(base64.b64decode(text))

'''
Done by PC231392 / PCModder / PC290717
Full scripts shared to the world.
Do use it well and enjoy it well.
If possible, kindly do give credit to me.
Thanks to all.
100%
'''

#basic base64 encryption. to those modders who wish to use, simply decrypt it.